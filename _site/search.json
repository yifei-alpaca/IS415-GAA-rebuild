[
  {
    "objectID": "handson_ex/handson_ex02/handson_ex02.html",
    "href": "handson_ex/handson_ex02/handson_ex02.html",
    "title": "Hands-On Ex02",
    "section": "",
    "text": "List of packages will be used.\n\npacman::p_load(sf, tidyverse,readr,readxl,tidyr,dplyr,ggplot2)\n\n\n\n\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format\n\n\nmpsz = st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nCyclingPath, a line feature layer in ESRI shapefile format\n\n\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2248 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n\n\n\nPreSchool, a point feature layer in kml file format.\n\n\npreschool = st_read(\"data/geospatial/pre-schools-location-kml.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex02\\data\\geospatial\\pre-schools-location-kml.kml' \n  using driver `KML'\nSimple feature collection with 1925 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\nplot(mpsz)\n\n\n\n\nPlot only the geometry.\n\nplot(st_geometry(mpsz))\n\n\n\n\nPlot using specific attribute.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\nChange EPSG code from 9001\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nto 3414\n\nmpsz3414 <- st_transform(mpsz, 3414)\n\n\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nTransforming the projection of preschool from wgs84 to svy21.\n\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n\nCheck:\n\nst_geometry(preschool3414)\n\nGeometry set for 1925 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11203.01 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\n\n\n\n\nread in csv file (rmb not to push the csv raw data file to github)\n\nlistings <- read.csv(\"data/aspatial/listings.csv\", sep=',')\n\n%>% is call the “pipe” operator. It is used to perform multiple functions.\n\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),crs=4326) %>%\n  st_transform(crs = 3414)\n\n\nglimpse(listings_sf)\n\nRows: 4,161\nColumns: 17\n$ id                             <dbl> 50646, 71609, 71896, 71903, 275344, 289…\n$ name                           <chr> \"Pleasant Room along Bukit Timah\", \"Ens…\n$ host_id                        <int> 227796, 367042, 367042, 367042, 1439258…\n$ host_name                      <chr> \"Sujatha\", \"Belinda\", \"Belinda\", \"Belin…\n$ neighbourhood_group            <chr> \"Central Region\", \"East Region\", \"East …\n$ neighbourhood                  <chr> \"Bukit Timah\", \"Tampines\", \"Tampines\", …\n$ room_type                      <chr> \"Private room\", \"Private room\", \"Privat…\n$ price                          <int> 80, 145, 85, 85, 49, 184, 79, 49, 55, 5…\n$ minimum_nights                 <int> 92, 92, 92, 92, 60, 92, 92, 60, 60, 60,…\n$ number_of_reviews              <int> 18, 20, 24, 47, 14, 12, 133, 17, 12, 3,…\n$ last_review                    <chr> \"2014-12-26\", \"2020-01-17\", \"2019-10-13…\n$ reviews_per_month              <dbl> 0.18, 0.15, 0.18, 0.34, 0.11, 0.10, 1.0…\n$ calculated_host_listings_count <int> 1, 6, 6, 6, 44, 6, 7, 44, 44, 44, 6, 7,…\n$ availability_365               <int> 365, 340, 265, 365, 296, 285, 365, 181,…\n$ number_of_reviews_ltm          <int> 0, 0, 0, 0, 1, 0, 0, 3, 2, 0, 1, 0, 0, …\n$ license                        <chr> \"\", \"\", \"\", \"\", \"S0399\", \"\", \"\", \"S0399…\n$ geometry                       <POINT [m]> POINT (22646.02 35167.9), POINT (…\n\n\n\n\n\n\nnQuadSegs refers to how many segments are generated per quadrant and features. Distance is in meters.\n\nbuffer_cycling <- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\ncalculating the area\n\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nsum() the total are\n\nsum(buffer_cycling$AREA)\n\n1556978 [m^2]\n\n\n\n\n\n\n\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\n\nsummary(mpsz3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    3.00    5.96    9.00   58.00 \n\n\n*Note that the count is slightly different from the website. I believed that it is due to the difference in number of rows in the dataset. Currently there is 1925 rows.\n\ntop_n(mpsz3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           58\n\n\n\n\n\n\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n\n\nplot(mpsz3414['PreSch Density'])\n\n\n\n\n\n\n\n\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\ny <- as.numeric(mpsz3414$`PreSch Count`)\nx <- as.numeric(mpsz3414$`PreSch Density`)\nplot(x, y, main = \"RS between Pre-school Density and Pre-school Count\",\n     xlab = \"Pre-school density (per km sq)\", ylab = \"Pre-school count\",\n     pch = 19, frame = FALSE)\nabline(lm(y ~ x, data = mpsz3414), col = \"blue\")"
  },
  {
    "objectID": "handson_ex/handson_ex03/handson_ex03.html",
    "href": "handson_ex/handson_ex03/handson_ex03.html",
    "title": "Hands-On Ex03",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\n\n\n\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n\ntail(popdata, n=5)\n\n# A tibble: 5 × 7\n  PA     SZ          AG          Sex     TOD                           Pop  Time\n  <chr>  <chr>       <chr>       <chr>   <chr>                       <dbl> <dbl>\n1 Yishun Yishun West 90_and_over Females HDB 5-Room and Executive F…    20  2020\n2 Yishun Yishun West 90_and_over Females HUDC Flats (excluding thos…     0  2020\n3 Yishun Yishun West 90_and_over Females Landed Properties               0  2020\n4 Yishun Yishun West 90_and_over Females Condominiums and Other Apa…    10  2020\n5 Yishun Yishun West 90_and_over Females Others                         30  2020\n\n\nCheck for unique() values\n\nunique(popdata[\"AG\"])\n\n# A tibble: 19 × 1\n   AG         \n   <chr>      \n 1 0_to_4     \n 2 5_to_9     \n 3 10_to_14   \n 4 15_to_19   \n 5 20_to_24   \n 6 25_to_29   \n 7 30_to_34   \n 8 35_to_39   \n 9 40_to_44   \n10 45_to_49   \n11 50_to_54   \n12 55_to_59   \n13 60_to_64   \n14 65_to_69   \n15 70_to_74   \n16 75_to_79   \n17 80_to_84   \n18 85_to_89   \n19 90_and_over\n\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n\nmutate_at is used to create new variable or columns to the dataframe in R. This function is under the dplyr package.\n.fun() create a list of function calls. a flexible way to generate a named list of functions.\n\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nleft join by joining popdata2020 to mpsz. If we do another way round, the map would have blank patches or it will not be a full complete sg map.\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\n\n\n\n\nqtm(), refers to quick thematic map plot\n\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\nDifferent kinds of color scheme palette:\n\nhttp://www.sthda.com/english/wiki/colors-in-r#:~:text=There%20are%203%20types%20of,YlGn%2C%20YlGnBu%20YlOrBr%2C%20YlOrRd.\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"RdPu\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\nhttps://www.rdocumentation.org/packages/tmap/versions/3.3-3/topics/tm_fill\n\njenks\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nequal\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nkmeans\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\npretty\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nquantile\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nhclust\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nheadtails\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"headtails\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\nsd\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.0000  0.6519  0.7025  0.7742  0.7645 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\nMap Legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nMap Style\nhttps://r-tmap.github.io/tmap/reference/tmap_style.html\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"cobalt\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\ntmap_style(\"white\")\n\n\n\n\nDrawing small multiple choropleth maps\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nyoungmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\n\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\n sg_sf <- st_set_crs(sg_sf, 3414)\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04a\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n mpsz_sf <- st_set_crs(mpsz_sf, 3414)\n\n\n\n\n\n\n\n\nst_geometry(mpsz_sf)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nChildcare is in 3414 format.\n\nst_crs(childcare_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nst_crs(mpsz_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#geospatial-data-wrangling",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#geospatial-data-wrangling",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Geospatial Data Wrangling",
    "text": "Geospatial Data Wrangling\nas_Spatial() convert geospatial data from simple feature data frame to sp spatial class.\nClass = SpatialPointsDataFrame\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n\n\n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#converting-the-spatial-class-into-generic-sp-format",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#converting-the-spatial-class-into-generic-sp-format",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Converting the Spatial* class into generic SP format",
    "text": "Converting the Spatial* class into generic SP format\nIn order to convert data in ppp object format, we need to convert the spatial class into spatial object first.\nppp refers to two-dimensional point pattern.\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\nClass = SpatialPoints\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nppp Point Pattern Object\nconvert spatial data into spatstat’s pp object format.\nA ppp object has the coordinates of the points and the analysis “window”. To assign the points locations we need to extract the coordinates from sptialpoint object which has been done above.\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\nHandling duplicated points\nto check if there is duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\nCount the number of duplicates\n\nmultiplicity(childcare_ppp)\n\n   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16 \n   1    1    1    3    1    1    1    1    2    1    1    1    1    1    1    1 \n  17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32 \n   1    1    1    1    1    1    1    1    1    1    9    1    1    1    1    1 \n  33   34   35   36   37   38   39   40   41   42   43   44   45   46   47   48 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n  49   50   51   52   53   54   55   56   57   58   59   60   61   62   63   64 \n   1    1    1    1    1    1    2    1    1    3    1    1    1    1    1    1 \n  65   66   67   68   69   70   71   72   73   74   75   76   77   78   79   80 \n   1    1    1    1    1    2    1    1    1    1    1    2    1    1    1    1 \n  81   82   83   84   85   86   87   88   89   90   91   92   93   94   95   96 \n   1    1    1    3    1    1    1    1    1    1    1    1    1    1    1    1 \n  97   98   99  100  101  102  103  104  105  106  107  108  109  110  111  112 \n   1    1    1    1    1    1    1    1    2    1    1    1    1    1    1    1 \n 113  114  115  116  117  118  119  120  121  122  123  124  125  126  127  128 \n   1    1    1    1    1    1    2    1    1    1    3    1    1    1    2    1 \n 129  130  131  132  133  134  135  136  137  138  139  140  141  142  143  144 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    3    2 \n 145  146  147  148  149  150  151  152  153  154  155  156  157  158  159  160 \n   1    2    1    1    1    2    2    3    1    5    1    5    1    1    1    2 \n 161  162  163  164  165  166  167  168  169  170  171  172  173  174  175  176 \n   1    1    1    1    2    1    1    1    1    1    1    2    1    1    1    1 \n 177  178  179  180  181  182  183  184  185  186  187  188  189  190  191  192 \n   1    4    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 193  194  195  196  197  198  199  200  201  202  203  204  205  206  207  208 \n   1    1    1    1    1    2    2    1    1    1    1    2    1    4    1    1 \n 209  210  211  212  213  214  215  216  217  218  219  220  221  222  223  224 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    1    1    1 \n 225  226  227  228  229  230  231  232  233  234  235  236  237  238  239  240 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 241  242  243  244  245  246  247  248  249  250  251  252  253  254  255  256 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 257  258  259  260  261  262  263  264  265  266  267  268  269  270  271  272 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    3 \n 273  274  275  276  277  278  279  280  281  282  283  284  285  286  287  288 \n   1    1    1    1    1    1    3    1    1    1    1    1    1    1    1    1 \n 289  290  291  292  293  294  295  296  297  298  299  300  301  302  303  304 \n   1    1    1    1    1    1    1    9    1    1    2    1    1    1    1    1 \n 305  306  307  308  309  310  311  312  313  314  315  316  317  318  319  320 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 321  322  323  324  325  326  327  328  329  330  331  332  333  334  335  336 \n   1    1    1    5    1    1    1    1    1    2    1    1    2    2    1    1 \n 337  338  339  340  341  342  343  344  345  346  347  348  349  350  351  352 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    2    2    1 \n 353  354  355  356  357  358  359  360  361  362  363  364  365  366  367  368 \n   1    1    1    1    9    1    1    1    1    1    1    1    1    1    1    1 \n 369  370  371  372  373  374  375  376  377  378  379  380  381  382  383  384 \n   1    3    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 385  386  387  388  389  390  391  392  393  394  395  396  397  398  399  400 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 401  402  403  404  405  406  407  408  409  410  411  412  413  414  415  416 \n   1    1    2    1    1    1    1    1    1    1    2    1    1    1    1    1 \n 417  418  419  420  421  422  423  424  425  426  427  428  429  430  431  432 \n   1    1    1    1    1    1    1    2    1    1    2    1    1    1    1    1 \n 433  434  435  436  437  438  439  440  441  442  443  444  445  446  447  448 \n   1    1    1    1    2    1    1    1    1    1    1    1    1    1    1    1 \n 449  450  451  452  453  454  455  456  457  458  459  460  461  462  463  464 \n   1    1    9    9    1    1    1    1    1    1    1    1    1    1    2    1 \n 465  466  467  468  469  470  471  472  473  474  475  476  477  478  479  480 \n   2    1    1    1    1    1    1    1    1    1    1    1    2    2    1    1 \n 481  482  483  484  485  486  487  488  489  490  491  492  493  494  495  496 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 497  498  499  500  501  502  503  504  505  506  507  508  509  510  511  512 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    2 \n 513  514  515  516  517  518  519  520  521  522  523  524  525  526  527  528 \n   1    1    1    1    1    1    1    1    1    1    1    2    1    1    3    1 \n 529  530  531  532  533  534  535  536  537  538  539  540  541  542  543  544 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 545  546  547  548  549  550  551  552  553  554  555  556  557  558  559  560 \n   1    1    1    1    1    1    1    1    1    3    1    1    1    1    1    1 \n 561  562  563  564  565  566  567  568  569  570  571  572  573  574  575  576 \n   2    2    2    1    1    1    1    2    1    1    2    1    1    1    2    1 \n 577  578  579  580  581  582  583  584  585  586  587  588  589  590  591  592 \n   1    2    1    1    1    1    1    9    1    4    1    2    1    1    1    1 \n 593  594  595  596  597  598  599  600  601  602  603  604  605  606  607  608 \n   2    1    1    1    1    1    1    1    2    1    2    1    1    1    1    1 \n 609  610  611  612  613  614  615  616  617  618  619  620  621  622  623  624 \n   1    1    1    1    1    1    1    1    1    2    1    2    1    1    1    1 \n 625  626  627  628  629  630  631  632  633  634  635  636  637  638  639  640 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 641  642  643  644  645  646  647  648  649  650  651  652  653  654  655  656 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    4 \n 657  658  659  660  661  662  663  664  665  666  667  668  669  670  671  672 \n   1    1    1    1    1    1    1    3    1    1    1    1    1    1    1    1 \n 673  674  675  676  677  678  679  680  681  682  683  684  685  686  687  688 \n   1    1    1    1    1    4    1    1    1    1    1    4    1    1    1    1 \n 689  690  691  692  693  694  695  696  697  698  699  700  701  702  703  704 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 705  706  707  708  709  710  711  712  713  714  715  716  717  718  719  720 \n   1    1    2    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 721  722  723  724  725  726  727  728  729  730  731  732  733  734  735  736 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 737  738  739  740  741  742  743  744  745  746  747  748  749  750  751  752 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 753  754  755  756  757  758  759  760  761  762  763  764  765  766  767  768 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n 769  770  771  772  773  774  775  776  777  778  779  780  781  782  783  784 \n   1    1    1    1    1    1    1    1    1    4    1    1    1    1    1    1 \n 785  786  787  788  789  790  791  792  793  794  795  796  797  798  799  800 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 801  802  803  804  805  806  807  808  809  810  811  812  813  814  815  816 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 817  818  819  820  821  822  823  824  825  826  827  828  829  830  831  832 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 833  834  835  836  837  838  839  840  841  842  843  844  845  846  847  848 \n   1    1    1    1    1    1    1    2    1    1    1    1    1    1    1    1 \n 849  850  851  852  853  854  855  856  857  858  859  860  861  862  863  864 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 865  866  867  868  869  870  871  872  873  874  875  876  877  878  879  880 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 881  882  883  884  885  886  887  888  889  890  891  892  893  894  895  896 \n   3    1    1    1    2    1    1    1    3    1    1    3    1    1    1    1 \n 897  898  899  900  901  902  903  904  905  906  907  908  909  910  911  912 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 913  914  915  916  917  918  919  920  921  922  923  924  925  926  927  928 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 929  930  931  932  933  934  935  936  937  938  939  940  941  942  943  944 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 945  946  947  948  949  950  951  952  953  954  955  956  957  958  959  960 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n 961  962  963  964  965  966  967  968  969  970  971  972  973  974  975  976 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 977  978  979  980  981  982  983  984  985  986  987  988  989  990  991  992 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n 993  994  995  996  997  998  999 1000 1001 1002 1003 1004 1005 1006 1007 1008 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 \n   1    1    1    1    1    1    1    1    1    2    2    1    1    1    1    1 \n1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 \n   1    1    1    1    1    2    1    1    1    1    1    1    1    1    1    1 \n1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 \n   1    1    1    1    1    1    1    1    2    2    1    1    1    5    1    1 \n1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 \n   1    1    1    1    1    1    1    1    1    2    1    1    1    1    1    1 \n1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 \n   1    9    1    2    2    1    1    1    2    1    1    1    1    1    1    1 \n1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 \n   1    1    1    1    2    1    1    1    3    1    1    1    1    1    1    1 \n1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 \n   9    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 \n   1    1    1    2    1    1    1    1    1    1    1    1    1    1    1    1 \n1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    2 \n1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 \n   1    1    1    2    1    2    1    1    1    2    2    2    1    1    1    1 \n1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 \n   1    1    2    1    1    1    1    1    1    1    1    1    2    1    1    1 \n1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 \n   1    1    1    1    3    1    1    1    1    1    1    1    1    1    1    1 \n1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 \n   1    1    1    1    1    1    1    1    4    1    1    1    1    1    2    1 \n1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 \n   1    1    1    1    1    1    1    1    1    9    1    1    1    1    1    1 \n1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    2    1 \n1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 \n   1    2    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 \n   1    1    1    1    1    1    1    1    1    1    2    1    1    1    1    1 \n1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 \n   1    1    1    1    1    1    2    1    1    1    1    1    1    1    1    1 \n1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 \n   1    1    1    1    1    1    1    1    1    1    5    1    1    1    1    1 \n1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 \n   1    1    1    1    1    1    1    1    1    1    1    1    1    1    1    1 \n1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 \n   1    1    1    1    1    2    1    1    1    1    2    1    1    1    1    3 \n1537 1538 1539 1540 1541 1542 1543 1544 1545 \n   1    1    1    1    1    1    2    1    1 \n\n\nto know how many locations have more than one point event\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\nTo view the location of the duplicates\n\ntmap_mode('view')\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\n\n3 ways to overcome the problem of duplicates\n\ndelete duplicates (some useful points might be lost)\nuse jittering (do not occupy the same exact space)\nmake each point unique and attach the duplicates, and mark it.\n\nBelow code is using the 2nd method.\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#creating-owin-object",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#creating-owin-object",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Creating owin object",
    "text": "Creating owin object\nOwin = define the observation window of a point pattern. It is specially designed to represent this polygonal region.\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n*** Combine both the point and polygon feature in one ppp object class as shown below.\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#first-order-spatial-point-pattern-analysis",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#first-order-spatial-point-pattern-analysis",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "First-order Spatial Point Pattern Analysis",
    "text": "First-order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nConfirmatory Spatial Point Patterns Analysis by using Nearest Neighbour"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#kernel-density-estimation",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#kernel-density-estimation",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Kernel Density Estimation",
    "text": "Kernel Density Estimation\n\nType bandwidth algorithm\n\nkde_childcareSG_bw_diggle <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_childcareSG_bw_scott <- density(childcareSG_ppp,\n                              sigma=bw.scott,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\n\nkde_childcareSG_bw_CvL <- density(childcareSG_ppp,\n                              sigma=bw.CvL,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\n\nkde_childcareSG_bw_ppl <- density(childcareSG_ppp,sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\n\nppl algorithm gives us the narrower and smaller bandwidth. we can see how other algo works too as shown below.\n\nplot(kde_childcareSG_bw_ppl)\n\n\n\nplot(kde_childcareSG_bw_CvL)\n\n\n\nplot(kde_childcareSG_bw_scott)\n\n\n\nplot(kde_childcareSG_bw_diggle)\n\n\n\n\n\nbw <- bw.diggle(childcareSG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nRecalling KDE values\nrescale() is used to convert the unit of measurement from meter to kilometer.\n\nchildcareSG_ppp.km <- rescale(childcareSG_ppp, 1000, \"km\")\n\nre-run density()\n\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\nWorking with different automatic bandwidth method\n\n bw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\n\n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\n\n\n\nWorking with different kernel method\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#fixed-and-adaptive-kde",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#fixed-and-adaptive-kde",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Fixed and Adaptive KDE",
    "text": "Fixed and Adaptive KDE\n\nComputing KDE by using fixed bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome the prob is by using adaptive bandwidth instead.\n\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\nComputing KDE by using adaptive bandwidth\n\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\nConverting KDE output into grid object\nspplot is a plot method for spatial data with attributes.\n\ngridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\nConverting grided output into raster\n\nkde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)\n\n\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\nAssigning projection systems\n\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:3414 \nsource     : memory\nnames      : v \nvalues     : -8.476185e-15, 28.51831  (min, max)"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#visualizing-the-output-in-tmap",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#visualizing-the-output-in-tmap",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Visualizing the output in tmap",
    "text": "Visualizing the output in tmap\n\ntmap_mode('plot')\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\nComparing spatial point patterns using KDE\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\nConverting the spatial points data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreate owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\n***Combining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nplot areas and locations of the childcare centres.\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\nComputing KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\nComputing fixed bandwidth KDE\n\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "handson_ex/handson_ex04a/handson_ex04a.html#nearest-neighbour-analysis",
    "href": "handson_ex/handson_ex04a/handson_ex04a.html#nearest-neighbour-analysis",
    "title": "Hands-On Ex04a - 1st Order SPA Methods",
    "section": "Nearest Neighbour Analysis",
    "text": "Nearest Neighbour Analysis\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\nthere are many types of alternatives:\n\n“two.sided”\n“less”\n“greater”\n“clustered”\n“regular”\nalternative=\"less\" or alternative=\"clustered\": the alternative hypothesis is that R<1 corresponding to a clustered point pattern;\nalternative=\"greater\" or alternative=\"regular\": the alternative hypothesis is that R>1 corresponding to a regular or ordered point pattern;\nalternative=\"two.sided\": the alternative hypothesis is that R≠1 corresponding to a clustered or regular pattern.\n\nIn accordance with the conventional acceptance of statistical significance at a P-value of 0.05 or 5%, CI are frequently calculated at a confidence level of 95%. In general, if an observed result is statistically significant at a P-value of 0.05, then the null hypothesis should not fall within the 95% CI.\n\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99 )\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  childcareSG_ppp\nR = 0.54756, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\n\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_ck_ppp\nR = 0.94365, p-value = 0.096\nalternative hypothesis: two-sided\n\n\n\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 999 simulations of CSR with fixed n\n\ndata:  childcare_tm_ppp\nR = 0.80257, p-value = 0.002\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "",
    "text": "pacman::p_load(maptools, sf, raster, spatstat, tmap)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#import-the-spatial-data",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#import-the-spatial-data",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Import the spatial data",
    "text": "Import the spatial data\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nst_crs(sg_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")  %>%\n  st_transform(crs = 3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex04b\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nConvert sf data frames to sp’s Spatial* class\n\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\n\n\nConverting the Spatial* class into generic sp format\n\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nsg_sp <- as(sg, \"SpatialPolygons\")\n\n\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nConverting the generic sp format into spatstat’s ppp format\n\nchildcare_ppp <- as(childcare_sp, \"ppp\")\nchildcare_ppp\n\nPlanar point pattern: 1545 points\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\n\nplot(childcare_ppp)\n\n\n\n\n\nsummary(childcare_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\n\n\nHandling Duplicates\n\nany(duplicated(childcare_ppp))\n\n[1] TRUE\n\n\n\nsum(multiplicity(childcare_ppp) > 1)\n\n[1] 128\n\n\n\ntmap_mode('view')\n\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\ntmap_mode('plot')\n\n\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\n\n\nCreating owin object\n\nsg_owin <- as(sg_sp, \"owin\")\n\n\nplot(sg_owin)\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\n\nCombining point events object and owin object\n\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nsummary(childcareSG_ppp)\n\nPlanar point pattern:  1545 points\nAverage intensity 2.063463e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nWindow: polygonal boundary\n60 separate polygons (no holes)\n            vertices        area relative.area\npolygon 1         38 1.56140e+04      2.09e-05\npolygon 2        735 4.69093e+06      6.27e-03\npolygon 3         49 1.66986e+04      2.23e-05\npolygon 4         76 3.12332e+05      4.17e-04\npolygon 5       5141 6.36179e+08      8.50e-01\npolygon 6         42 5.58317e+04      7.46e-05\npolygon 7         67 1.31354e+06      1.75e-03\npolygon 8         15 4.46420e+03      5.96e-06\npolygon 9         14 5.46674e+03      7.30e-06\npolygon 10        37 5.26194e+03      7.03e-06\npolygon 11        53 3.44003e+04      4.59e-05\npolygon 12        74 5.82234e+04      7.78e-05\npolygon 13        69 5.63134e+04      7.52e-05\npolygon 14       143 1.45139e+05      1.94e-04\npolygon 15       165 3.38736e+05      4.52e-04\npolygon 16       130 9.40465e+04      1.26e-04\npolygon 17        19 1.80977e+03      2.42e-06\npolygon 18        16 2.01046e+03      2.69e-06\npolygon 19        93 4.30642e+05      5.75e-04\npolygon 20        90 4.15092e+05      5.54e-04\npolygon 21       721 1.92795e+06      2.57e-03\npolygon 22       330 1.11896e+06      1.49e-03\npolygon 23       115 9.28394e+05      1.24e-03\npolygon 24        37 1.01705e+04      1.36e-05\npolygon 25        25 1.66227e+04      2.22e-05\npolygon 26        10 2.14507e+03      2.86e-06\npolygon 27       190 2.02489e+05      2.70e-04\npolygon 28       175 9.25904e+05      1.24e-03\npolygon 29      1993 9.99217e+06      1.33e-02\npolygon 30        38 2.42492e+04      3.24e-05\npolygon 31        24 6.35239e+03      8.48e-06\npolygon 32        53 6.35791e+05      8.49e-04\npolygon 33        41 1.60161e+04      2.14e-05\npolygon 34        22 2.54368e+03      3.40e-06\npolygon 35        30 1.08382e+04      1.45e-05\npolygon 36       327 2.16921e+06      2.90e-03\npolygon 37       111 6.62927e+05      8.85e-04\npolygon 38        90 1.15991e+05      1.55e-04\npolygon 39        98 6.26829e+04      8.37e-05\npolygon 40       415 3.25384e+06      4.35e-03\npolygon 41       222 1.51142e+06      2.02e-03\npolygon 42       107 6.33039e+05      8.45e-04\npolygon 43         7 2.48299e+03      3.32e-06\npolygon 44        17 3.28303e+04      4.38e-05\npolygon 45        26 8.34758e+03      1.11e-05\npolygon 46       177 4.67446e+05      6.24e-04\npolygon 47        16 3.19460e+03      4.27e-06\npolygon 48        15 4.87296e+03      6.51e-06\npolygon 49        66 1.61841e+04      2.16e-05\npolygon 50       149 5.63430e+06      7.53e-03\npolygon 51       609 2.62570e+07      3.51e-02\npolygon 52         8 7.82256e+03      1.04e-05\npolygon 53       976 2.33447e+07      3.12e-02\npolygon 54        55 8.25379e+04      1.10e-04\npolygon 55       976 2.33447e+07      3.12e-02\npolygon 56        61 3.33449e+05      4.45e-04\npolygon 57         6 1.68410e+04      2.25e-05\npolygon 58         4 9.45963e+03      1.26e-05\npolygon 59        46 6.99702e+05      9.35e-04\npolygon 60        13 7.00873e+04      9.36e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 748741000 square units\nFraction of frame area: 0.414\n\n\n\nplot(sg_owin, col='light blue')\npoints(childcareSG_ppp, col='black', cex=.5)\n\n\n\n\nanother simple method.\n\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#extract-study-area-by-target-planning-area",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#extract-study-area-by-target-planning-area",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "* Extract study area (by target planning area)",
    "text": "* Extract study area (by target planning area)\n\npg = mpsz[mpsz@data$PLN_AREA_N == \"PUNGGOL\",]\ntm = mpsz[mpsz@data$PLN_AREA_N == \"TAMPINES\",]\nck = mpsz[mpsz@data$PLN_AREA_N == \"CHOA CHU KANG\",]\njw = mpsz[mpsz@data$PLN_AREA_N == \"JURONG WEST\",]\n\n\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\nplot(tm, main = \"Tampines\")\nplot(ck, main = \"Choa Chu Kang\")\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\nConvert the spatial point data frame into generic sp format\n\npg_sp = as(pg, \"SpatialPolygons\")\ntm_sp = as(tm, \"SpatialPolygons\")\nck_sp = as(ck, \"SpatialPolygons\")\njw_sp = as(jw, \"SpatialPolygons\")\n\n\n\nCreate owin object\n\npg_owin = as(pg_sp, \"owin\")\ntm_owin = as(tm_sp, \"owin\")\nck_owin = as(ck_sp, \"owin\")\njw_owin = as(jw_sp, \"owin\")\n\n\n\nCombining childcare points and the study area\n\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\ntransform the unit of measurements from m to km.\n\nchildcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, \"km\")\n\nplots them\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#second-order-spatial-point-pattern-analysis",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#second-order-spatial-point-pattern-analysis",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "* Second-order Spatial Point Pattern Analysis",
    "text": "* Second-order Spatial Point Pattern Analysis\n\nAnalysing spatial point process using G-function Gest() function\n\nEstimates the nearest neighbour distance distribution function G(r) from a point pattern in a window of arbitrary shape.\nThe estimate of G is a useful statistic summarizing one aspect of the “clustering” points.\n\n\n\nChua Chu Kang Planning Area\n\nG_CK = Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\nPerforming complete spatial Randomness Test\n\nHo = The distribution of childcare services at Choa Chu Kang are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001. (99.9%)\n\nMonte Carlo test with G-function\n\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nG_tm = Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\nHo = The distribution of childcare services at Tampines are randomly distributed.\nH1= The distribution of childcare services at Tampines are not randomly distributed.\nThe null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.\n\n\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_tm.csr)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-f-function",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-f-function",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Analysing Spatial Point Process Using F-Function",
    "text": "Analysing Spatial Point Process Using F-Function\nEstimates the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape.\n\nChua Chu Kang Planning Area\n\nF_CK = Fest(childcare_ck_ppp)\nplot(F_CK)\n\n\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\nF_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_CK.csr)\n\n\n\n\n\n\nTampines Planning Area\n\nF_tm = Fest(childcare_tm_ppp, correction = \"best\")\nplot(F_tm)\n\n\n\n\n\nF_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(F_tm.csr)"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#section",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#section",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "",
    "text": "Analysing Spatial Point Process Using K-Function\nK-function measures the number of events found up to a given distance of any particular event.\n\nChua Chu Kang Planning Area\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\nTampines Planning Area\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-l-function",
    "href": "handson_ex/handson_ex04b/handson_ex04b.html#analysing-spatial-point-process-using-l-function",
    "title": "Hands-On Ex04b - 2nd Order SPA Methods",
    "section": "Analysing Spatial Point Process Using L-Function",
    "text": "Analysing Spatial Point Process Using L-Function\n\n\nChua Chu Kang Planning Area\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\nTampines Planning Area\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,  99.\n\nDone.\n\n\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html",
    "title": "In-Class Ex02",
    "section": "",
    "text": "Download 3 R packages:\n\npacman::p_load(sf, tidyverse, funModeling)\n\n\nNotes to take note of:\n\nst_ refers to spatial and temporal\nsf, the table with feature attributes and feature geometries, which contains\nsfc , the list-column with the geometries for each feature (record), which is composed of\nsfg, the feature geometry of an individual simple feature."
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html#importing-geospatial",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html#importing-geospatial",
    "title": "In-Class Ex02",
    "section": "Importing Geospatial",
    "text": "Importing Geospatial\n\nThe geoBoundaries dataset\n\ngeoNGA <- st_read(\"data/geospatial/\",\n                  layer = \"geoBoundaries-NGA-ADM2\" ) %>%\n  st_transform(crs=26392)\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\n\nThe NGA dataset\n\nNGAadm <- st_read(\"data/geospatial/\",\n                  layer = \"nga_admbnda_adm2_osgof_20190417\" ) %>%\n  st_transform(crs=26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\n\nImporting Aspatial data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\")\n\n\n\nWrite the extracted data into rds format\n\n#saveRDS(wp_nga, file = \"data/rsd/wp_nga.RDS\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "href": "inclass_ex/inclass_ex02/In-class_Ex02.html#converting-aspatial-data-into-geospatial",
    "title": "In-Class Ex02",
    "section": "Converting Aspatial Data into Geospatial",
    "text": "Converting Aspatial Data into Geospatial\n\nst_as_sfc, convert foreign geomerty object to a sfc object.\nst_as_sf, convert foreign object to an sf object. if dataset contains a column call “geometry”, coords will results in overwriting of this column by sfc geometry list column.\n\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nst_sf, is to create sf object, which extends df-like objects with a simple feature list column.\n\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 95008 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2.707441 ymin: 4.301812 xmax: 14.21828 ymax: 13.86568\nGeodetic CRS:  WGS 84\n# A tibble: 95,008 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429068 GRID3             7.98    5.12 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2 222071 Federal Minis…    6.96    3.60 08/16/… Yes     Boreho… Well    Mechan…\n 3 160612 WaterAid          6.49    7.93 12/04/… Yes     Boreho… Well    Hand P…\n 4 160669 WaterAid          6.73    7.65 12/04/… Yes     Boreho… Well    <NA>   \n 5 160642 WaterAid          6.78    7.66 12/04/… Yes     Boreho… Well    Hand P…\n 6 160628 WaterAid          6.96    7.78 12/04/… Yes     Boreho… Well    Hand P…\n 7 160632 WaterAid          7.02    7.84 12/04/… Yes     Boreho… Well    Hand P…\n 8 642747 Living Water …    7.33    8.98 10/03/… Yes     Boreho… Well    Mechan…\n 9 642456 Living Water …    7.17    9.11 10/03/… Yes     Boreho… Well    Hand P…\n10 641347 Living Water …    7.20    9.22 03/28/… Yes     Boreho… Well    Hand P…\n# … with 94,998 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nProject transformation\ncheck projection\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)\n\n\nst_crs(wp_sf)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\n\nExcluded redundant fields\n\nNGA <- NGAadm %>%\n  select(c(3:4, 8:9))\n\n\n\nCheck for duplicate names\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\n[1] \"Bassa\"    \"Ifelodun\" \"Irepodun\" \"Nasarawa\" \"Obi\"      \"Surulere\"\n\n\n\nNGA$ADM2_EN[94] <- \"Bassa, Kogi\"\nNGA$ADM2_EN[95] <- \"Bassa, Plateau\"\nNGA$ADM2_EN[304] <- \"Ifelodun, Kwara\"\nNGA$ADM2_EN[305] <- \"Ifelodun, Osun\"\nNGA$ADM2_EN[355] <- \"Irepodun, Kwara\"\nNGA$ADM2_EN[356] <- \"Irepodun, Osun\"\nNGA$ADM2_EN[519] <- \"Nasarawa, Kano\"\nNGA$ADM2_EN[520] <- \"Nasarawa, Nasarawa\"\nNGA$ADM2_EN[546] <- \"Obi, Benue\"\nNGA$ADM2_EN[547] <- \"Obi, Nasarawa\"\nNGA$ADM2_EN[693] <- \"Surulere, Lagos\"\nNGA$ADM2_EN[694] <- \"Surulere, Oyo\"\n\n\nfreq(data=wp_sf,\n     input = \"#status_clean\")\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                             <NA>     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\n\nwp_sf_nga <- wp_sf %>%\n  rename (status_clean = '#status_clean') %>%\n  select (status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n\nExtracting Water Point Data\n\nwp_functional <- wp_sf_nga %>% \n  filter(status_clean %in%\n    c(\"Functional\",\n    \"Functional but not in use\",\n    \"Functional but needs repair\"))\n\n\nwp_nonfunctional <- wp_sf_nga %>% \n  filter(status_clean %in%\n    c(\"Abandoned/Decommissioned\",\n      \"Abandoned\",\n      \"Non-Functional due to dry season\",\n      \"Non-Functional\",\n      \"Non functional due to dry season\"))\n\nextract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>% \n  filter(status_clean==\"unknown\")\n\n\nNGA_wp <- NGA %>%\n  mutate(`total_wp` = lengths(\n    st_intersects (NGA, wp_sf_nga))) %>%\n  mutate (`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate (`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\n\n\n\nSaving the analytical data in rds format\n\n#saveRDS(NGA_wp,\"data/rsd/NGA_wp.rds\")\n\n\n\nVisualising attributes by using statistical graphs\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n    color=\"red\",\n    linetype=\"dashed\", size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") + \n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "inclass_ex/inclass_ex03/inclass_ex03.html",
    "href": "inclass_ex/inclass_ex03/inclass_ex03.html",
    "title": "In-Class Ex03",
    "section": "",
    "text": "pacman::p_load(sf, tmap, tidyverse)\n\n\n\n\nNGA_wp <- read_rds(\"data/rds/NGA_wp.rds\")\n\n\n\n\n\np1 <- tm_shape(NGA_wp) + \n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 <- tm_shape (NGA_wp) + \n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p1, nrow=1)\n\n\n\n\n\nNGA_wp <- NGA_wp %>% \n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_functional= wp_nonfunctional/total_wp)\n\n\ntm_shape (NGA_wp) + \n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n              alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water points\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "inclass_ex/inclass_ex03/inclass_ex03.html#extreme-value-map",
    "href": "inclass_ex/inclass_ex03/inclass_ex03.html#extreme-value-map",
    "title": "In-Class Ex03",
    "section": "Extreme Value Map",
    "text": "Extreme Value Map\n\nPercentile map\n0-1%, 1-10%, 10-50%, 50-90%, 90-99%, 99-100%\ncumulative probabilities - c(0,01,1,5,9,99,1)\n\n\nData preparation\nStep 1 - exclude records with NA by using the code chunk below.\n\nNGA_wp <- NGA_wp %>%\n  drop_na()\n\nStep 2 - creating customized classification and extracting values\n\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp['pct_functional'] %>%\n  st_set_geometry(NULL)\nquantile(var[,1],percent)\n\n        0%         1%        10%        50%        90%        99%       100% \n0.00000000 0.00000000 0.08333333 0.35593220 0.64444444 0.84517647 1.00000000 \n\n\n\nget.var <- function (vname, df) { \n  v <- df[vname] %>%\n    st_set_geometry(NULL)\n  v <- unname (v[,1])\n  return(v)\n}\n\n\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\") {\n  percent < - c(0,.01,.1,.5,.9,.99,1) \n  var <- get.var (vnam, df) \n  bperc <- quantile(var, percent) \n    tm_polygons() + \n    tm_shape(df) + \n        tm_fill(vnam,\n              title=legtitle, \n              breaks=bperc, \n              palette=\"Blues\",\n          labels= c(\"‹ 1%\", \"1% - 10%\", \"10% - 50%\",\"50% - 90%\", \"90%-99%\", \"> 99%\"))\n    tm_borders +\n    tm_layout(main.title = mtitle,\n              title.position = c(\"right\", \"bottom\"))\n}\n\n\n#percentmap(\"wp_functional\", NGA_wp)\n\n\n\nBox Map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\nTBC…"
  },
  {
    "objectID": "inclass_ex/inclass_ex04/inclass_ex04.html",
    "href": "inclass_ex/inclass_ex04/inclass_ex04.html",
    "title": "In-Class Ex04",
    "section": "",
    "text": "spatstat is mainly for spatial point analytics\n\n\npacman::p_load(maptools, sf, raster, spatstat, tmap)\n\n\n\n\ndata are in meters and are in object format\nst_read() extension of r read(), this df will create new columns called “geometry”. it stores all the geometry features inside which is a geospatial data.\ntidyverse join to sf will retain spatial data.\n\nChildcare is a single file\n\nchildcare_sf <- st_read(\"data/child-care-services-geojson.geojson\") %>%\n  st_transform(crs = 3414)\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nRead in list of data files in the folder\n\nsg_sf <- st_read(dsn = \"data\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\nmpsz_sf <- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex04\\data' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots(alph=0.5,\n          size= 0.01) + \n  tm_view(set.zoom.limits = c(11,14))\n\n\n\n\n\n\n\ntmap_mode(‘view’) will always connect to the server. it is best not to include more than 5.\ntm_bubbles create proportional symbol maps.\ntm_view(set.zoom.limits = c(11,14)):\n\n(a,b) a is the zoom out value, b is the zoom in"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/data/stores.html",
    "href": "inclass_ex/inclass_ex05/data/stores.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     \n\n\n        0 0     false"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/data/study_area.html",
    "href": "inclass_ex/inclass_ex05/data/study_area.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "<!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’>     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html",
    "title": "In-Class Ex05",
    "section": "",
    "text": "sfdep - working with simple features. point pattern analysis\nonly focus on local clq\n\n\npacman::p_load(tidyverse, sf, tmap, sfdep)\n\n\n\n\nstudyArea <- st_read(dsn = \"data\",\n                     layer = \"study_area\") %>% \n  st_transform(crs= 3829)\n\nReading layer `study_area' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 7 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 121.4836 ymin: 25.00776 xmax: 121.592 ymax: 25.09288\nGeodetic CRS:  TWD97\n\n\n\nstore <- st_read(dsn = \"data\",\n                     layer = \"stores\") %>% \n  st_transform(crs= 3829)\n\nReading layer `stores' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex05\\data' using driver `ESRI Shapefile'\nSimple feature collection with 1409 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 121.4902 ymin: 25.01257 xmax: 121.5874 ymax: 25.08557\nGeodetic CRS:  TWD97"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html#visualizing-the-sf-layer",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html#visualizing-the-sf-layer",
    "title": "In-Class Ex05",
    "section": "Visualizing the sf layer",
    "text": "Visualizing the sf layer\ntm_polygon must be on top followed by the dots\n\ntmap_mode(\"view\") \ntm_shape(studyArea) + \n  tm_polygons() +\ntm_shape(store)+ \n  tm_dots(col = \"Name\", \n          size = 0.01,\n          border.col = \"black\", \n          border.lwd = 0.5) +\n  tm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "inclass_ex/inclass_ex05/inclass_ex05.html#local-colocation-quotient",
    "href": "inclass_ex/inclass_ex05/inclass_ex05.html#local-colocation-quotient",
    "title": "In-Class Ex05",
    "section": "Local Colocation Quotient",
    "text": "Local Colocation Quotient\nnumber 6 = 6 neighbors (always go for even number)\n\nnb <- include_self(\n  st_knn(st_geometry(store), 6)\n)\n\n\nwt <- st_kernel_weights(nb, \n                        store, \n                        \"gaussian\", \n                        adaptive = TRUE)\n\n\nFamilyMart <- store %>% \n  filter(Name == \"Family Mart\")\nA <- FamilyMart$Name\n\n\nSevenEleven <- store %>% \n  filter(Name == \"7-Eleven\")\nB <- SevenEleven$Name\n\n\nLCLQ <-local_colocation(A,B,nb,wt,49)\n\nthe code below is to combine both dataframe together. in this case we cannot use relational join because they dont have unique id. LCLQ join to store\n\nLCLQ_stores<-cbind(store, LCLQ)\n\n\ntmap_mode(\"view\") \ntm_shape(studyArea) +   \n  tm_polygons() + \ntm_shape(LCLQ_stores) +   \n  tm_dots(col = \"X7.Eleven\",           \n          size = 0.1,           \n          border.col = \"black\",           \n          border.lwd = 0.5) + \n  tm_dots(col = \"X7.Eleven\",           \n        size = 0.1,           \n        border.col = \"black\",           \n        border.lwd = 0.5) +\ntm_view(set.zoom.limits = c(12,16))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415 Journey",
    "section": "",
    "text": "Welcome to my Geospatial Analytics and Applications journey."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, you are tasked to apply appropriate spatial point patterns analysis methods to discover the geographical distribution of functional and non-function water points and their co-locations if any in Osun State, Nigeria."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-geospatial-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-geospatial-dataset",
    "title": "Take-home_Ex01",
    "section": "Importing GeoSpatial Dataset",
    "text": "Importing GeoSpatial Dataset\n\nNGA <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nInstead of loading just Osun state, it is good to keep a raw data above in case we need to roll back or for checking purposes. After we look at the data, we can filter for column ADM1_EN and extract out only Osun, Nigeria. Let’s run the following chunk of code:\n\nNGA_osun <- st_read(\"data/geospatial/\",\n               layer = \"nga_admbnda_adm2\") %>%\n  st_transform(crs = 26392) %>% filter(`ADM1_EN` == \"Osun\")\n\nReading layer `nga_admbnda_adm2' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\Take-home_Ex\\Take-home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset",
    "title": "Take-home_Ex01",
    "section": "Importing Aspatial dataset",
    "text": "Importing Aspatial dataset\n\nFilter the raw dataset to only in Osun State, Nigeria.\nFor aspatial data, we can open up csv file to check which are the columns to be filtered. In this case column #clean_country_name & #clean_adm1 will be filtered.\n\n wp_osun_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\" & `#clean_adm1` == \"Osun\")\n\nLets do a check on the content of a simple feature data frame.\n\nst_geometry(NGA_osun)\n\nGeometry set for 30 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 5 geometries:\n\n\n\n\nConverting (aspatial data) into sf point features\nWe need to convert into sfc field by using st_as_sfc data type.\n\nwp_osun_nga$Geometry = st_as_sfc(wp_osun_nga$`New Georeferenced Column`)\nwp_osun_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNext, we will convert the dataframe into an sf object by using st_sf(). It is important to transform the referencing system of the data into the sf format. Next we have to transform Nigeria projected coordinate system.\n\nwp_sf_osun <- st_sf(wp_osun_nga, crs=4326) %>%\n  st_transform(crs = 26392)\nwp_sf_osun\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 177285.9 ymin: 340054.1 xmax: 291287.1 ymax: 450859.7\nProjected CRS: Minna / Nigeria Mid Belt\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nwe can check the transformed projected system.\n\nst_crs(wp_sf_osun)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-cleaning",
    "title": "Take-home_Ex01",
    "section": "Data cleaning",
    "text": "Data cleaning\n\nRemove unwanted columns\n\nAs the data set contains many redundant fields, we will be selecting the columns that we want.\nI have included SD_EN for further analysis purposes.\n\n\n\nkeeps <- c(3:4, 8:9, 15:16)\nNGA_osun = NGA_osun[keeps]\n\n\nkeeps2 <- c(1,2,7:9,11:14,17,21,22,26)\nwp_sf_osun = wp_sf_osun[keeps2]\n\nCheck for duplicates for NGA_osun\n\nNGA_osun$ADM2_EN[duplicated(NGA_osun$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nIn this case, there is no duplicate names, we do not need to transform any names. We can move on to the next phase which is the EDA."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-and-further-cleaning",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis-and-further-cleaning",
    "title": "Take-home_Ex01",
    "section": "Exploratory data analysis and further cleaning",
    "text": "Exploratory data analysis and further cleaning\nIn our in class exe02, we uses ggplot() of ggplot package to reveal the distribution of water point status visually.\n*Note: currently my freq() for funModeling package is not working properly, hence, I’m using alternative method to plot the horizontal barchart.\n\nggplot(wp_sf_osun) + geom_bar(aes(y = fct_infreq(`#status_clean`), fill=`#status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nAs we can see from the images, there are category which can be group together such as “Abandoned” can combine with “Abandoned/Decommissioned”. As we can see that there are quite a number of missing values. Hence, we should rename to “Unknown”.\n\nwp_sf_osun <- wp_sf_osun %>% \n  rename(status_clean = '#status_clean') %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"Unknown\"))\n\n\nwp_sf_osun$status_clean[wp_sf_osun$status_clean==\"Abandoned\"]  <- \"Abandoned/Decommissioned\" \n\nWe can plot the freq distribution diagram again.\n\n#freq(data = wp_sf_osun,\n     #input = 'status_clean')\n\nggplot(wp_sf_osun) + geom_bar(aes(y = fct_infreq(`status_clean`), fill=`status_clean`, stat=\"identity\"))+  theme(legend.position = \"right\")\n\n\n\n\nBased on the image above, about to 42% of the water point are Functional, followed by 4.5% needs repair and about 1.2% are not in use. Whereas for Non-Functional, it is about 36.2% and 2.8% are non functional due to the dry season. The unknown status is at about 13.5% which is quite a large %. If let say, most of the unknown falls under non-functional, we can say that in Osun state close to 50% of the water points are not very clean and further work improvement needs to perform in the future. One of the reason for being “unknown” could be the area have not been accessed yet.\n\nIn order to have a better view, we can plot a chart based on the the (adm2) which is the Secondary Administrative Division.\n\nggplot(wp_sf_osun, aes(x = `#clean_adm2`, fill = status_clean)) + \n  geom_bar() + \n  coord_flip() + \n  theme_minimal() + \n  xlab(\"Secondary Admin Division\") + \n  ylab(\"Number of status\") + \n  scale_fill_brewer(type = \"qual\", palette = 3, name = \"Status\")\n\n\n\n\nAs we can see from the image above, Aiyedade has the highest number of status record ( 455 est.) as compared to others. 2nd in line would be Ejigbo (440 est.). The lowest status recorded would be Ife East with a record of 20 est.\n\nBy plotting based on the Secondary Admin Division, it is hard to interpret the area of interest e.g located in the north, south, east or west area. Notice that for NGA_osun dataframe, I have included SD_EN which shows the results of East, West and Central. Whereas for wp_sf_osun, there is no SD_EN which shows East, West or Central.\n\nIn this section, I would combine both dataset and try to find some useful insights. As mentioned by Prof Kam during in-class 05, we use cbind when the dataset has no unique identifier and it also must have the same number of row. But, in this case, I am able to use relational join even though there is no exact unique identifier but we can join on the Secondary Admin Division as it exists in both data frame. But before joining, we need to make sure that the column name is the same. We can change it to ADM2_EN for water point.\n\nnames(wp_sf_osun)[9] <- \"ADM2_EN\"\n\nNext, we can proceed to joining the data. But before that, lets deactivate the geometry in this new data frame for the purpose of this EDA analysis. When I first left join, some rows shows NA values, I went to cross check and notice the upper and lower case difference. With that, let’s change all names to lower case instead.\n\nwp_sf_osun<- wp_sf_osun %>% \n mutate(ADM2_EN = tolower(ADM2_EN)) \n\n\nNGA_osun<- NGA_osun %>% \n mutate(ADM2_EN = tolower(ADM2_EN)) \n\n\nNGA_WP <- left_join(wp_sf_osun %>% as.data.frame(), NGA_osun %>% as.data.frame(), by = \"ADM2_EN\")\n\nAfter joining, I still have NA rows. I went to cross check and realized the difference. The spelling and “-”.\n\nNGA_osun: aiyedire, ola-oluwa\nwp_sf_osun: ayedire , ola oluwa\n\nIn the situation above, I will replace ayedire to aiyedire and ola oluwa to ola-oluwa.\n\nwp_sf_osun$ADM2_EN <- str_replace(wp_sf_osun$ADM2_EN,\"ayedire\", \"aiyedire\")\n\n\nwp_sf_osun$ADM2_EN <- str_replace(wp_sf_osun$ADM2_EN,\"ola oluwa\", \"ola-oluwa\")\n\nNext, re join the 2 data frame again.\n\nNGA_WP <- left_join(wp_sf_osun %>% as.data.frame(), NGA_osun %>% as.data.frame(), by = \"ADM2_EN\")\n\nLets do a quick check if there is any NA in the column in NGA_WP data frame.\n\nsum(is.na(NGA_WP$SD_EN))\n\n[1] 0\n\n\nyay! there is no NA values in that column. Now we can plot a graph based on SD_EN column to have a clearer view of the region.\n\nggplot(NGA_WP, aes(x = SD_EN, fill = status_clean)) + \n  geom_bar() + \n  coord_flip() + \n  theme_minimal() + \n  xlab(\"SD_EN\") + \n  ylab(\"Number of status\") + \n  scale_fill_brewer(type = \"qual\", palette = 2, name = \"Status\")\n\n\n\n\nAs we can see from the chart above, Osun west has the most number of status being recorded. It also can the most functional water point as compared to the other 2 region. As for Non functional, Osun East has the most number being recorded.\n\nExtracting water point data\nFunctional\n\nwp_functional <- wp_sf_osun %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nNon Functional\n\nwp_nonfunctional <- wp_sf_osun %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\"))\n\nUnknown\n\nwp_unknown <- wp_sf_osun %>%\n  filter(status_clean == \"Unknown\")\n\n\n\n\nPerforming Point in Polygon count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each Secondary Division.\n\nNGA_wp_SubDiv <- NGA_osun %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA_osun, wp_sf_osun))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA_osun, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA_osun, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA_osun, wp_unknown)))"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Converting KDE output into grid object\n\ngridded_kde_ife_east_f<- as.SpatialGridDataFrame.im(kde_ife_east_f)\ngridded_kde_iwo_f <- as.SpatialGridDataFrame.im(kde_iwo_f)\n\ngridded_kde_ife_east_nf <- as.SpatialGridDataFrame.im(kde_ife_east_nf)\ngridded_kde_iwo_nf <- as.SpatialGridDataFrame.im(kde_iwo_nf)\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_f)\n\n\n\nspplot(gridded_kde_iwo_f)\n\n\n\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_nf)\n\n\n\nspplot(gridded_kde_iwo_nf)\n\n\n\n\n\nConverting gridded output into raster\n\nkde_ife_east_f_raster <- raster(gridded_kde_ife_east_f)\nkde_iwo_f_raster <- raster(gridded_kde_iwo_f)\nkde_ife_east_nf_raster <- raster(gridded_kde_ife_east_nf)\nkde_iwo_nf_raster <- raster(gridded_kde_iwo_nf)\n\n\nprojection(kde_ife_east_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_ife_east_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\npar(mfrow=c(2,4))\ntm_shape(kde_ife_east_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Funtional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_ife_east_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\n\n\nHighlight the advantage of kernel density map over point map\nThe advantage of kernel density map over point map lies in the ability of the former to provide a smoother representation of the data distribution. Unlike point map which simply plots individual data points, the kernel density map uses a mathematical technique to estimate the underlying probability density function of the data and provides a smooth estimate of the data density over the entire region. This smoothed representation of the data gives a clearer picture of the underlying distribution pattern, making it easier to identify trends and anomalies. Additionally, the use of color gradients in kernel density maps allows for a clearer representation of the distribution range, making it easier to interpret the results."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-spatial-data-analysis-esda",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-spatial-data-analysis-esda",
    "title": "Take-home_Ex01",
    "section": "Exploratory Spatial Data Analysis (ESDA)",
    "text": "Exploratory Spatial Data Analysis (ESDA)\nPreviously, we have converted into SF format which is wp_sf_osun. However, the data frame is for Aspatial data. As for Geospatial data, we have not yet converting it. We have to convert sf data frames to sp’s Spatial class. We will be using NGA_osun.\n\nNGA_osun_s <- as_Spatial(NGA_osun)\n\nCheck the description summary of the new sp class data.\n\nNGA_osun_s\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 6\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE,        SD_EN, SD_PCODE \nmin values  : aiyedade,   NG030001,    Osun,      NG030, Osun Central,  NG03001 \nmax values  :   osogbo,   NG030030,    Osun,      NG030,    Osun West,  NG03003 \n\n\n\nNGA_osun_sp <- as(NGA_osun_s, \"SpatialPolygons\")\n\n\nNGA_osun_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\nNext, we will be converting water point data frame into ppp format. But first, we have to convert it from sf to sp. Do note that, we have transformed the coordinate system previously hence, we do not need to transform again."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#create-owin-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#create-owin-object",
    "title": "Take-home_Ex01",
    "section": "Create owin object",
    "text": "Create owin object\nowin is specially designed to represent this polygonal region.\n\nNGA_osun_owin <- as(NGA_osun_sp, \"owin\")\n\n\nplot(NGA_osun_owin)\n\n\n\n\n\nCombining point events object and owin\n\nwpNGA_owin_f = wp_ppp_osun_f[NGA_osun_owin]\n\n\nwpNGA_owin_nf = wp_ppp_osun_nf[NGA_osun_owin]\n\n\nplot(wpNGA_owin_f)\n\n\n\n\n\nplot(wpNGA_owin_nf)\n\n\n\n\nBased on the image above, there is a little cluttered in many different areas. However, it seems that there are more records at the centre & top area of Osun, Nigeria."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-mapping",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-mapping",
    "title": "Take-home_Ex01",
    "section": "Choropleth Mapping",
    "text": "Choropleth Mapping\n\nfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_functional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of functional water point by Sub Division\", \n            legend.outside = TRUE)\n\n\nnonfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_nonfunctional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of non-functional water point by Sub Division\",\n            legend.outside = TRUE)\n\n\nfunctional_choroplot\n\n\n\n\nAs shown in the chart above, it has a better view where by ejigbo is more dense than the rest as compared to the bar chart shown above.\n\nnonfunctional_choroplot\n\n\n\n\nBased on images above, we can see that for ejigbo has the highest distribution in functional water point. Whereas for non functional, ejigbo and aiyedade has the highest distribution in non functional water point. This could mean that ejigbo has slightly more functional water point than non functional water point due to its scale.\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#first-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "First-order Spatial Point Pattern Analysis",
    "text": "First-order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object",
    "title": "Take-home_Ex01",
    "section": "Converting KDE output into grid object",
    "text": "Converting KDE output into grid object\nNow, we have to convert our KDE outputs into RasterLayer objects. Since we can’t do that directly, we’ll need to convert them into a SpatialGridDataFrame first, then convert the SpatialGridDataFrame into RasterLayer objects:\n\ngridded_kde_wpNGA_owin_bw_f <- as.SpatialGridDataFrame.im(kde_wpNGA_owin_bw_f)\nspplot(gridded_kde_wpNGA_owin_bw_f)\n\n\n\n\n\ngridded_kde_wpNGA_owin_bw_nf <- as.SpatialGridDataFrame.im(kde_wpNGA_owin_bw_nf)\nspplot(gridded_kde_wpNGA_owin_bw_nf)\n\n\n\n\n\nConverting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_wpNGA_owin_bw_raster_f <- raster(gridded_kde_wpNGA_owin_bw_f)\n\n\nkde_wpNGA_owin_bw_raster_nf <- raster(gridded_kde_wpNGA_owin_bw_nf)\n\n\nkde_wpNGA_owin_bw_raster_f\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nkde_wpNGA_owin_bw_raster_nf\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)\n\n\nNotice that the crs property is NA. We have to assign to appropriate projection system with the correct unit of measurement.\n\nprojection(kde_wpNGA_owin_bw_raster_f) <- CRS(\"+init=EPSG:26392 +units=km\" )\nkde_wpNGA_owin_bw_raster_f\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nprojection(kde_wpNGA_owin_bw_raster_nf) <- CRS(\"+init=EPSG:26392 +units=km\" )\nkde_wpNGA_owin_bw_raster_nf\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +units=km \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)\n\n\nNow we can see the crs property completed.\n\n\nVisualising the output on OpenStreetMap\n\ndensity_map <- function(rasterObj, map_title) {\n  tm_basemap(\"OpenStreetMap\") +\ntm_shape(rasterObj) +\n  tm_raster(\"v\", alpha=0.65) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            legend.height = 0.5, \n            legend.width = 0.4,\n            main.title = map_title,\n            main.title.position = 'center',\n            main.title.size = 1,\n            frame = FALSE)\n  }\n\n\ndensity_map(kde_wpNGA_owin_bw_raster_f, map_title = \"Osun Functional Water Point Density Map\")\n\n\n\n\n\ndensity_map(kde_wpNGA_owin_bw_raster_nf, map_title = \"Osun Non-Functional Water Point Density Map\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-spatial-point-pattern-using-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#comparing-spatial-point-pattern-using-kde",
    "title": "Take-home_Ex01",
    "section": "Comparing Spatial Point Pattern using KDE",
    "text": "Comparing Spatial Point Pattern using KDE\nPreviously, we have included the region in the data set, in this section, we will be comparing KDE water point at Central, East and West region.\n\nExtract the study area\n\noe = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun East',]\now = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun West',]\noc = NGA_osun_s[NGA_osun_s$SD_EN == 'Osun Central',]\n\n\npar(mfrow=c(1,3))\nplot(oc, main=\"Osun Central\")\nplot(oe, main=\"Osun East\")\nplot(ow, main=\"Osun West\")\n\n\n\n\n\noe_sp = as(oe, \"SpatialPolygons\")\now_sp = as(ow, \"SpatialPolygons\")\noc_sp = as(oc, \"SpatialPolygons\")\n\n\noe_owin = as(oe_sp, \"owin\")\now_owin = as(ow_sp, \"owin\")\noc_owin = as(oc_sp, \"owin\")\n\n\n\nCombining Water points and the study area\n\nwp_oe_ppp_f = wp_ppp_osun_f[oe_owin]\nwp_ow_ppp_f = wp_ppp_osun_f[ow_owin]\nwp_oc_ppp_f = wp_ppp_osun_f[oc_owin]\n\n\nwp_oe_ppp_nf = wp_ppp_osun_nf[oe_owin]\nwp_ow_ppp_nf = wp_ppp_osun_nf[ow_owin]\nwp_oc_ppp_nf = wp_ppp_osun_nf[oc_owin]\n\nNext, rescale() function is used to transform the unit of measurement from m to km\n\nwp_oe_ppp_f.km = rescale(wp_oe_ppp_f, 1000, \"km\")\nwp_ow_ppp_f.km = rescale(wp_ow_ppp_f, 1000, \"km\")\nwp_oc_ppp_f.km = rescale(wp_oc_ppp_f, 1000, \"km\")\n\n\nwp_oe_ppp_nf.km = rescale(wp_oe_ppp_nf, 1000, \"km\")\nwp_ow_ppp_nf.km = rescale(wp_ow_ppp_nf, 1000, \"km\")\nwp_oc_ppp_nf.km = rescale(wp_oc_ppp_nf, 1000, \"km\")\n\nplot the 3 study area and the location of the water point\n\npar(mfrow=c(1,3))\nplot(wp_oc_ppp_f.km, main=\"Osun Central Functional\")\nplot(wp_oe_ppp_f.km, main=\"Osun East Functional\")\nplot(wp_ow_ppp_f.km, main=\"Osun West Functional\")\n\n\n\n\n\npar(mfrow=c(1,3))\nplot(wp_oc_ppp_nf.km, main=\"Osun Central Non Functional\")\nplot(wp_oe_ppp_nf.km, main=\"Osun East Non Functional\")\nplot(wp_ow_ppp_nf.km, main=\"Osun West Non Functional\")\n\n\n\n\n\n\nComputing KDE by Region\nOver here, we will continue to use bw.ppl too so as to make a non bias analysis.\n\npar(mfrow=c(1,3))\nplot(density(wp_oc_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Central Functional\")\nplot(density(wp_oe_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun East Functional\")\nplot(density(wp_ow_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun West Functional\")\n\n\n\n\n\npar(mfrow=c(1,3))\nplot(density(wp_oc_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun Central Non Functional\")\nplot(density(wp_oe_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun East Non Functional\")\nplot(density(wp_ow_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Osun West Non Functional\")\n\n\n\n\nBased on the 3 graph above, we can see that central area seems more concentrated. Although, it is a little hard to narrow down into the division. I will be extracting Osun’s population based on region to determine which area we should be analyse on.\n\ntm_shape(NGA_wp_SubDiv_pop) +\n  tm_fill(\"T_TL\",\n          style = \"equal\",\n          palette = \"Oranges\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nAs mentioned above here, ejigbo, iwon, irewole, oriade, ife central and ife east is most dense and from the bar chart above here ife east and iwo has the most population with 312,801 and 302,585 respectively.\nWith the findings, I will be narrowing to the 2 most populated division for further analysis:\n\nife east\niwo\n\n\n\nExtract the study area for ife east & iwo\n\nife_east = NGA_osun_s[NGA_osun_s$ADM2_EN == 'ife east',]\niwo = NGA_osun_s[NGA_osun_s$ADM2_EN == 'iwo',]\n\n\nife_east_sp = as(ife_east, \"SpatialPolygons\")\niwo_sp = as(iwo, \"SpatialPolygons\")\n\n\nife_east_owin = as(ife_east_sp, \"owin\")\niwo_owin = as(iwo_sp, \"owin\")\n\n\nwp_ife_east_ppp_f = wp_ppp_osun_f[ife_east_owin]\nwp_iwo_ppp_f = wp_ppp_osun_f[iwo_owin]\n\nwp_ife_east_ppp_nf = wp_ppp_osun_nf[ife_east_owin]\nwp_iwo_ppp_nf = wp_ppp_osun_nf[iwo_owin]\n\nwp_ife_east_ppp_f.km = rescale(wp_ife_east_ppp_f, 1000, \"km\")\nwp_iwo_ppp_f.km = rescale(wp_iwo_ppp_f, 1000, \"km\")\n\nwp_ife_east_ppp_nf.km = rescale(wp_ife_east_ppp_nf, 1000, \"km\")\nwp_iwo_ppp_nf.km = rescale(wp_iwo_ppp_nf, 1000, \"km\")\n\n\nkde_ife_east_f <- density(wp_ife_east_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\nkde_iwo_f <- density(wp_iwo_ppp_f.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot( kde_ife_east_f,\n   main=\"ife_east Functional\")\nplot( kde_iwo_f,\n   main=\"iwo Functional\")\n\n\n\n\n\nkde_ife_east_nf <- density(wp_ife_east_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\nkde_iwo_nf <- density(wp_iwo_ppp_nf.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\")\n\n\npar(mfrow=c(1,2))\nplot( kde_ife_east_nf,\n   main=\"ife_east Non Functional\")\nplot( kde_iwo_nf,\n   main=\"iwo Non Functional\")\n\n\n\n\n\n\nConverting KDE output into grid object\n\ngridded_kde_ife_east_f<- as.SpatialGridDataFrame.im(kde_ife_east_f)\ngridded_kde_iwo_f <- as.SpatialGridDataFrame.im(kde_iwo_f)\n\ngridded_kde_ife_east_nf <- as.SpatialGridDataFrame.im(kde_ife_east_nf)\ngridded_kde_iwo_nf <- as.SpatialGridDataFrame.im(kde_iwo_nf)\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_f)\n\n\n\nspplot(gridded_kde_iwo_f)\n\n\n\n\n\npar(mfrow=c(1,2))\n\nspplot(gridded_kde_ife_east_nf)\n\n\n\nspplot(gridded_kde_iwo_nf)\n\n\n\n\n\n\nConverting gridded output into raster\n\nkde_ife_east_f_raster <- raster(gridded_kde_ife_east_f)\nkde_iwo_f_raster <- raster(gridded_kde_iwo_f)\nkde_ife_east_nf_raster <- raster(gridded_kde_ife_east_nf)\nkde_iwo_nf_raster <- raster(gridded_kde_iwo_nf)\n\n\nprojection(kde_ife_east_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_f_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_ife_east_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\nprojection(kde_iwo_nf_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n\n\npar(mfrow=c(2,4))\ntm_shape(kde_ife_east_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Funtional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_f_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_ife_east_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE,\n            main.title = \"ife east Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntm_shape(kde_iwo_nf_raster) + \n  tm_raster(\"v\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE, \n            main.title = \"iwo Non Functional\",\n            main.title.position = \"center\",\n            main.title.size = 0.8)\n\n\n\ntmap_mode(\"plot\")\n\nFor ife east, there are more non functional than functional water point area as the scale shows are higher range. As for iwo state, functional water point is more than non functional water point. Due to the rural area, improvements of the water points can be challenging as a whole of Osun, Nigeria. Instead, I will be narrowing down to only a state for deeper analysis. The purpose of this analysis could inform policy and decision-making related to water manageand invest in the state, as well as guide efforts to improve the overall water supply system in ife east state because the non functional water point is higher in a highly populated state.\n\nHighlight the advantage of kernel density map over point map\nThe advantage of kernel density map over point map lies in the ability of the former to provide a smoother representation of the data distribution. Unlike point map which simply plots individual data points, the kernel density map uses a mathematical technique to estimate the underlying probability density function of the data and provides a smooth estimate of the data density over the entire region. This smoothed representation of the data gives a clearer picture of the underlying distribution pattern, making it easier to identify trends and anomalies. Additionally, the use of color gradients in kernel density maps allows for a clearer representation of the distribution range, making it easier to interpret the results."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis",
    "title": "Take-home_Ex01",
    "section": "Population Analysis",
    "text": "Population Analysis\nIn this section, I have found Nigeria’s Subnation population statistic in this website NGA_Subnation Population statistic. We can download nga_admpop_adm2_2020.csv.\nIn this data set, it is categorized by demographics such as age and sex on a Nigeria administrative level 0-2 . The purpose of this is to help me to identify which area with the most population are affected by water shortages and poor water quality.\n\nImport aspatial data\n\nnga_osun_pop <- read_csv(\"data/aspatial/nga_admpop_adm2_2020.csv\") %>%\n  filter( `ADM1_NAME` == \"OSUN\")\n\nAfter looking at the data, we can keep T_TL as it is refer to the total population. But before that, we can drop unwanted columns to save memory space and clean the data.\n\nkeeps_pop <- c(1:9)\nnga_osun_pop = nga_osun_pop[keeps_pop]\n\n\nnga_osun_pop<- nga_osun_pop %>% \n mutate(ADM2_NAME = tolower(ADM2_NAME)) \n\nNext we can do some basic EDA to understand the data.\n\ncolourCount = length(unique(nga_osun_pop$ADM2_NAME))\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\n\nggplot(nga_osun_pop, aes(x=ADM2_NAME, y=T_TL, fill=ADM2_NAME )) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  xlab(\"ADM2_NAME\") + \n  ylab(\"Number of population\") +\n   geom_text(aes(label=T_TL), color=\"black\", size=2.5)+\n   scale_fill_manual(values = getPalette(colourCount))\n\n\n\n\nAs we can see from the chart above ife north and iwo has the most population with 312,801 and 302,585 respectively.\nNext, we can plot population choropleth mapping, but before that, we should do a join with NGA_wp_SubDiv as we previously joined NGA and wp together to plot chorpleth charts. In this case, we have a unique subdivision name ADM2_NAME in nga_osun_pop and can join together with ADM2_EN in NGA_wp_SubDiv.\nChange column name:\n\nnames(nga_osun_pop)[5] <- \"ADM2_EN\"\n\n\nNGA_wp_SubDiv_pop <- left_join(NGA_wp_SubDiv %>% as.data.frame(), nga_osun_pop %>% as.data.frame(), by = \"ADM2_EN\")\n\n\nst_crs(NGA_wp_SubDiv_pop)\n\nCoordinate Reference System: NA\n\n\nAs shown above, there is no Coordinate system. We have to re assign them.\n\nNGA_wp_SubDiv_pop <- st_sf(NGA_wp_SubDiv_pop, crs=4326) %>%\n  st_transform(crs = 26392)\nNGA_wp_SubDiv_pop\n\nSimple feature collection with 30 features and 20 fields (with 30 geometries empty)\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE.x ADM1_EN ADM1_PCODE.x        SD_EN SD_PCODE\n1        aiyedade     NG030001    Osun        NG030    Osun West  NG03003\n2        aiyedire     NG030002    Osun        NG030    Osun West  NG03003\n3  atakumosa east     NG030003    Osun        NG030    Osun East  NG03002\n4  atakumosa west     NG030004    Osun        NG030    Osun East  NG03002\n5      boluwaduro     NG030005    Osun        NG030 Osun Central  NG03001\n6          boripe     NG030006    Osun        NG030 Osun Central  NG03001\n7       ede north     NG030007    Osun        NG030    Osun West  NG03003\n8       ede south     NG030008    Osun        NG030    Osun West  NG03003\n9        egbedore     NG030009    Osun        NG030    Osun West  NG03003\n10         ejigbo     NG030010    Osun        NG030    Osun West  NG03003\n   total_wp wp_functional wp_nonfunctional wp_unknown pct_functional\n1       389           157              154         78      0.4035990\n2       175            89               57         29      0.5085714\n3       223            98               92         33      0.4394619\n4       246           111              103         32      0.4512195\n5       129            63               51         15      0.4883721\n6       177            79               85         13      0.4463277\n7       216           141               50         25      0.6527778\n8       146            72               39         35      0.4931507\n9       142            63               44         35      0.4436620\n10      434           274              126         34      0.6313364\n   pct_nonfunctional ADM0_NAME ADM0_PCODE ADM1_NAME ADM1_PCODE.y ADM2_PCODE.y\n1          0.3958869   NIGERIA         NG      OSUN        NG030     NG030001\n2          0.3257143   NIGERIA         NG      OSUN        NG030     NG030002\n3          0.4125561   NIGERIA         NG      OSUN        NG030     NG030003\n4          0.4186992   NIGERIA         NG      OSUN        NG030     NG030004\n5          0.3953488   NIGERIA         NG      OSUN        NG030     NG030005\n6          0.4802260   NIGERIA         NG      OSUN        NG030     NG030006\n7          0.2314815   NIGERIA         NG      OSUN        NG030     NG030007\n8          0.2671233   NIGERIA         NG      OSUN        NG030     NG030008\n9          0.3098592   NIGERIA         NG      OSUN        NG030     NG030009\n10         0.2903226   NIGERIA         NG      OSUN        NG030     NG030010\n     F_TL   M_TL   T_TL           geometry\n1  101556 104135 205691 MULTIPOLYGON EMPTY\n2   61295  60528 121823 MULTIPOLYGON EMPTY\n3   48012  49623  97635 MULTIPOLYGON EMPTY\n4   43204  44483  87687 MULTIPOLYGON EMPTY\n5   46966  48109  95075 MULTIPOLYGON EMPTY\n6   93680  97503 191183 MULTIPOLYGON EMPTY\n7   40631  41179  81810 MULTIPOLYGON EMPTY\n8   36449  37233  73682 MULTIPOLYGON EMPTY\n9   58743  59536 118279 MULTIPOLYGON EMPTY\n10 108710 111767 220477 MULTIPOLYGON EMPTY\n\n\n\nst_crs(NGA_wp_SubDiv_pop)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]\n\n\n\npopulation_choroplot <- tm_shape(NGA_wp_SubDiv_pop) +\n  tm_fill(\"T_TL\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Reds\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_text(\"ADM2_EN\", size = .7) +\n  tm_layout(main.title = \"Distribution of Population in Osun\", \n            legend.outside = TRUE)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset-for-population.",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-aspatial-dataset-for-population.",
    "title": "Take-home_Ex01",
    "section": "Importing Aspatial Dataset for Population.",
    "text": "Importing Aspatial Dataset for Population.\nLets compare point map and kernel density map for Osun Central area.\n\n#kde_oc.bw <- density(wp_oc_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\n#plot(kde_oc.bw)\n\n\n#gridded_kde_oc.bw <- as.SpatialGridDataFrame.im(kde_oc.bw)\n#spplot(gridded_kde_oc.bw)\n\n\n#kde_oc_bw_raster <- raster(gridded_kde_oc.bw)\n\n\n#projection(kde_oc_bw_raster) <- CRS(\"+init=EPSG:26392 +units=km\")\n#kde_oc_bw_raster\n\n\nClipping Polygon and Point to form Point Map\n\n#NGA_Osun_Central = NGA_osun[NGA_osun$SD_EN == \"Osun Central\",]\n\nClipping polygon and point together, using st_intersects()\n\n#oc_wp <- st_intersects(NGA_Osun_Central, wp_sf_osun)\n#oc_wp <- wp_sf_osun[unlist(oc_wp),]\n\n\n\nPoint Map\n\n#ggplot() + \n#  geom_sf(data = NGA_Osun_Central) + \n#  geom_sf(data = oc_wp) + \n#  theme(legend.position = \"none\",\n#        panel.grid = element_blank(),\n#        axis.title = element_blank(),\n#        axis.text = element_blank(),\n#        axis.ticks = element_blank(),\n#        panel.background = element_blank()) \n\n\n\nDensity Map\n\n#density_map(kde_oc_bw_raster, map_title = \"Osun Central,Nigeria Density Map\")\n\n\n\nMonte Carlo method"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis-additional-findings",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#population-analysis-additional-findings",
    "title": "Take-home_Ex01",
    "section": "Population Analysis (additional findings)",
    "text": "Population Analysis (additional findings)\nIn this section, I have found Nigeria’s Subnation population statistic in this website NGA_Subnation Population statistic. We can download nga_admpop_adm2_2020.csv.\nIn this data set, it is categorized by demographics such as age and sex on a Nigeria administrative level 0-2 . The purpose of this is to help me to identify which area with the most population are affected by water shortages and poor water quality.\n\nImport aspatial data\n\nnga_osun_pop <- read_csv(\"data/aspatial/nga_admpop_adm2_2020.csv\") %>%\n  filter( `ADM1_NAME` == \"OSUN\")\n\nAfter looking at the data, we can keep T_TL as it is refer to the total population. But before that, we can drop unwanted columns to save memory space and clean the data.\n\nkeeps_pop <- c(1:9)\nnga_osun_pop = nga_osun_pop[keeps_pop]\n\n\nnga_osun_pop<- nga_osun_pop %>% \n mutate(ADM2_NAME = tolower(ADM2_NAME)) \n\nNext we can do some basic EDA to understand the data. Because there is some limit in the colors, we have to extend the colors by using colorRampPalette() function.\n\n\nPopulation Bar chat\n\ncolourCount = length(unique(nga_osun_pop$ADM2_NAME))\ngetPalette = colorRampPalette(brewer.pal(9, \"Set1\"))\n\nggplot(nga_osun_pop, aes(x=ADM2_NAME, y=T_TL, fill=ADM2_NAME )) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() + \n  xlab(\"ADM2_NAME\") + \n  ylab(\"Number of population\") +\n   geom_text(aes(label=T_TL), color=\"black\", size=2.5)+\n   scale_fill_manual(values = getPalette(colourCount))\n\n\n\n\nAs we can see from the chart above ife east and iwo has the most population with 312,801 and 302,585 respectively.\nNext, we can plot population choropleth mapping, but before that, we should do a join with NGA_wp_SubDiv as we previously joined NGA and wp together to plot chorpleth charts. In this case, we have a unique subdivision name ADM2_NAME in nga_osun_pop and can join together with ADM2_EN in NGA_wp_SubDiv.\nChange column name:\n\nnames(nga_osun_pop)[5] <- \"ADM2_EN\"\n\n\nNGA_wp_SubDiv_pop <- left_join(NGA_osun, nga_osun_pop,\n                              by = c(\"ADM2_EN\"))\n\n\n\nDistribution of population by Sub Division\nAs shown above, there is no Coordinate system. We have to re assign them.\n\ntmap_mode(\"plot\")\ntm_shape(NGA_wp_SubDiv_pop)+\n  tm_fill(\"T_TL\", \n          style = \"quantile\", \n          palette = \"Oranges\",\n          legend.show = FALSE,\n         ) +\n  tm_text(\"ADM2_EN\", size = .6) +\n  tm_layout(main.title = \"Distribution of Population by Sub Division\",\n            main.title.position = \"center\",\n            main.title.size = 0.8) +tm_borders(alpha = 0.5)\n\n\n\n\nAs we can see from the chart, ejigbo, iwo, irewole, ife central, ife east and oriade is much more dense as compared to the rest. This shows that the dense area has the most population. We will be continue with this data below."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#converting-kde-output-into-grid-object-1",
    "title": "Take-home_Ex01",
    "section": "Converting KDE output into grid object",
    "text": "Converting KDE output into grid object\n\nClipping Polygon and Point to form Point Map\n\n#NGA_Osun_Central = NGA_osun[NGA_osun$SD_EN == \"Osun Central\",]\n\nClipping polygon and point together, using st_intersects()\n\n#oc_wp <- st_intersects(NGA_Osun_Central, wp_sf_osun)\n#oc_wp <- wp_sf_osun[unlist(oc_wp),]\n\n\n\nPoint Map\n\n#ggplot() + \n#  geom_sf(data = NGA_Osun_Central) + \n#  geom_sf(data = oc_wp) + \n#  theme(legend.position = \"none\",\n#        panel.grid = element_blank(),\n#        axis.title = element_blank(),\n#        axis.text = element_blank(),\n#        axis.ticks = element_blank(),\n#        panel.background = element_blank()) \n\n\n\nDensity Map\n\n#density_map(kde_oc_bw_raster, map_title = \"Osun Central,Nigeria Density Map\")\n\n\n\nMonte Carlo method"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "1st order Spatial Point Pattern Analysis",
    "text": "1st order Spatial Point Pattern Analysis\n\nKernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-spatial-point-pattern-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-spatial-point-pattern-analysis",
    "title": "Take-home_Ex01",
    "section": "2nd Order Spatial Point Pattern Analysis",
    "text": "2nd Order Spatial Point Pattern Analysis\nNow that we have analysed the spatial point patterns, we have to confirm our observation statistically. I have narrowed down on my observation to ife east and iwo area which is the most populated area. The nearest-neighbour distance is the measure of distance from each point to its nearest neighbour. G-function measures the distribution of distances from an arbitrary event to its nearest neighbour.\n\nIfe East Functional - G Function Gest()\n\nH0: The distribution of the Functional water points at ife east are randomly distributed\nH1: The distribution of the Functional water points at ife east are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_ife_east_f = Gest(wp_ife_east_ppp_f, correction = \"border\")\nplot(G_ife_east_f, xlim=c(0,500))\n\n\n\n\n\nG_ife_east_f.csr <- envelope(wp_ife_east_ppp_f, Gest, nsim = 95)\n\nGenerating 95 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,  95.\n\nDone.\n\n\n\nplot(G_ife_east_f.csr)\n\n\n\n\nConclusion: The observed G(r) is above the G(theo) as well as the envelope. This shows that functional water point in ife east are clustered. Hence, we will reject the null hypothesis that the functional water points at ife east are randomly distributed.\n\n\nIwo Functional - G Function\n\nH0: The distribution of the Functional water points at iwo are randomly distributed\nH1: The distribution of the Functional water points at iwo are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_iwo_f = Gest(wp_iwo_ppp_f, correction = \"border\")\nplot(G_iwo_f, xlim=c(0,500))\n\n\n\n\n\nG_iwo_f.csr <- envelope(wp_iwo_ppp_f, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_iwo_f.csr)\n\n\n\n\nConclusion: The observed G(r) is far above the G(theo) as well as the envelope. This shows that functional water point in iwo are clustered. Hence, we will reject the null hypothesis that the functional water points at iwo are randomly distributed at 95% confident interval.\n\n\nIfe East Non Functional - G Function\n\nH0: The distribution of the Non functional water points at ife east are randomly distributed\nH1: The distribution of the Non Functional water points at ife east are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_ife_east_nf = Gest(wp_ife_east_ppp_nf, correction = \"border\")\nplot(G_ife_east_nf, xlim=c(0,500))\n\n\n\n\n\nG_ife_east_nf.csr <- envelope(wp_ife_east_ppp_nf, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_ife_east_nf.csr)\n\n\n\n\nConclusion: The observed G(r) is above the G(theo) as well as the envelope. This shows that non functional water point in ife east are clustered. Hence, we will reject the null hypothesis that the non functional water points at ife east are randomly distributed.\n\n\nIwo Non Functional - G Function\n\nH0: The distribution of the Non functional water points at iwo are randomly distributed\nH1: The distribution of the Non Functional water points at iwo are not randomly distributed\nConfidence level at 95%\nSignificance level: 0.05\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.05\n\n\nG_iwo_nf = Gest(wp_iwo_ppp_nf, correction = \"border\")\nplot(G_iwo_nf, xlim=c(0,500))\n\n\n\n\n\nG_iwo_nf.csr <- envelope(wp_iwo_ppp_nf, Gest, nsim = 39)\n\nGenerating 39 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(G_iwo_nf.csr)\n\n\n\n\nConclusion: The observed G(r) is far above the G(theo) as well as the envelope. This shows that non functional water point in iwo are clustered. Hence, we will reject the null hypothesis that the functional water points at iwo are randomly distributed at 95% confident interval."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#section-1",
    "title": "Take-home_Ex01",
    "section": "",
    "text": "Spatial Correlation Analysis\nPreviously, we have visualize geospatial data on the different status here. Having to further dive in, we can look into the subjective quality in both functional and non functional.\nLet’s take a look at quality column.\n\nunique(wp_functional$`#subjective_quality`)\n\n[1] \"Acceptable quality\"   \"No because of Colour\" \"No because of Odour\" \n[4] \"No because of Taste\" \n\n\n\nunique(wp_nonfunctional$`#subjective_quality`)\n\n[1] \"Acceptable quality\"   \"No because of Taste\"  \"No because of Odour\" \n[4] \"No because of Colour\"\n\n\nBased on the result, both functional and non functional has 4 unique values.\nLet’s plot them to have a better idea.\n\ntmap_mode(\"view\")\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(wp_functional) +\n  tm_dots(col = '#subjective_quality', size = 0.02, title=\"Quality Type\" ,alpha=0.6,\n          palette = c(\"#e76f51\", \"#e9c46a\",\"#2a9d8f\"))\n\n\n\n\n\n\n\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(wp_nonfunctional) +\n  tm_dots(col = '#subjective_quality', size = 0.02, title=\"Quality Type\" ,alpha=0.6,\n          palette = c(\"#e76f51\", \"#e9c46a\",\"#2a9d8f\"))\n\n\n\n\n\n\n\ntmap_mode(\"plot\")\n\nAs we are working with marked data, and we know that the values are categorical (different room types), we need to ensure that the marked field is of factor data type. However, as seen from the output, our room_type field is of chr data type, not factor! Let's rectify that with the as.factor() function:\n\nwp_osun_f@data$`#subjective_quality` <-as.factor(wp_osun_f@data$`X.subjective_quality`)\n\n\nwp_osun_nf@data$`X.subjective_quality` <-as.factor(wp_osun_nf@data$`X.subjective_quality`)\n\n\nwp_functional_ppp_factor <- as(wp_osun_f, \"ppp\") \nwp_nonfunctional_ppp_factor <- as(wp_osun_nf, \"ppp\") \n\n\nCorrelation\nIn this section, I will be using ife east and iwo owin object. We will be looking at:\n\nife east quality of water in functional\nife east quality of water in non functional\niwo quality of water in functional\niwo quality of water in non functional\n\n\nife_east_marked_ppp <- wp_functional_ppp_factor[ife_east_owin]\niwo_marked_ppp <- wp_functional_ppp_factor[iwo_owin]\n\n\nife_east_marked_ppp_nf <- wp_nonfunctional_ppp_factor[ife_east_owin]\niwo_marked_ppp_nf <- wp_nonfunctional_ppp_factor[iwo_owin]\n\n\npar(mfrow=c(1,2))\nplot(ife_east_marked_ppp, main = \"ife east F\", which.marks = \"#subjective_quality\")\nplot(ife_east_marked_ppp_nf, main = \"ife east NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(iwo_marked_ppp, main = \"iwo F\", which.marks = \"#subjective_quality\")\nplot(iwo_marked_ppp_nf, main = \"iwo NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\nIn this section, hypothesis testing will be conducted utilising second-order statistics (L function), to assess if the spatial distribution of functional and non-functional water points are independent from each other.\n\n\n\n2nd order multi-type point pattern analysis - Cross L function\n\nplot((density(split(rescale(ife_east_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, acceptable quality and cause of taste seems to have a stronger complementary relationship with each other in ife east area for both functional and non functional area. However, Acceptable quality being the most strong ones due to the scale.\n\nplot((density(split(rescale(iwo_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(iwo_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, for functional in iwo area, most of the charts has a stronger complementary relationship with each other except for odour. However, Acceptable quality being the most strong ones due to the scale. As for non functional, most of the charts has a strong complementary relationship too except for color chart, there is a slight difference on the area. However, Acceptable quality also being the most strong ones due to the scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map-group-by-secondary-division",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#choropleth-map-group-by-secondary-division",
    "title": "Take-home_Ex01",
    "section": "Choropleth map group by Secondary Division",
    "text": "Choropleth map group by Secondary Division\n\nFunctional\n\ntm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_functional\",\n          style = \"equal\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\nNon-Functional\n\ntm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"wp_nonfunctional\",\n          style = \"equal\",\n          palette = \"Reds\",\n          thres.poly = 0) + \n   tm_text(\"ADM2_EN\", size = .7) +\n  tm_facets(by=\"SD_EN\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\nHowever, We know that water points are not equally distributed in space. I will tabulate the proportion of functional water points and the proportion of non-functional water points in secondary division.\n\nNGA_wp_SubDiv <- NGA_wp_SubDiv %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\nPlotting the map of the rate\n\nfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"pct_functional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Purples\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by Sub Division\", \n            legend.outside = TRUE)\n\n\nnonfunctional_choroplot <- tm_shape(NGA_wp_SubDiv) +\n  tm_fill(\"pct_nonfunctional\",\n          n = 5,\n          style = \"equal\",\n          palette = \"Purples\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of non-functional water point by Sub Division\",\n            legend.outside = TRUE)\n\n\ntmap_arrange(functional_choroplot, nonfunctional_choroplot, nrow = 2)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-and-non-functional",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#functional-and-non-functional",
    "title": "Take-home_Ex01",
    "section": "Functional and Non-Functional",
    "text": "Functional and Non-Functional\n\nany variable with _f means it is Functional\nany variable with _nf means it is Non-Functional\n\n\nwp_osun_f <- as_Spatial(wp_functional)\n\n\nwp_osun_nf <- as_Spatial(wp_nonfunctional)\n\n\nwp_osun_f\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 13\nnames       : row_id,                                     X.source, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.facility_type, X.clean_country_name, X.clean_adm1,  ADM2_EN, X.install_year,   X.management_clean,              status_clean, X.subjective_quality \nmin values  :  36914, Federal Ministry of Water Resources, Nigeria,             Borehole,                  Spring,               Hand Pump,        Improved,              Nigeria,         Osun, aiyedade,           1917, Community Management,                Functional,   Acceptable quality \nmax values  : 471319,                                        GRID3,     Protected Spring,                    Well, Mechanized Pump - Solar,        Improved,              Nigeria,         Osun,   osogbo,           2015,    School Management, Functional but not in use,  No because of Taste \n\n\n\nwp_osun_nf\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 13\nnames       : row_id,                                     X.source, X.water_source_clean, X.water_source_category,      X.water_tech_clean, X.facility_type, X.clean_country_name, X.clean_adm1,  ADM2_EN, X.install_year,   X.management_clean,                     status_clean, X.subjective_quality \nmin values  :  34829, Federal Ministry of Water Resources, Nigeria,             Borehole,                  Spring,               Hand Pump,        Improved,              Nigeria,         Osun, aiyedade,           1967, Community Management,         Abandoned/Decommissioned,   Acceptable quality \nmax values  : 421239,                                        GRID3,     Protected Spring,                    Well, Mechanized Pump - Solar,        Improved,              Nigeria,         Osun,   osogbo,           2015,    School Management, Non-Functional due to dry season,  No because of Taste \n\n\nNext, convert sf to generic sp format of the water point.\n\nwp_sp_osun_f <- as(wp_osun_f, \"SpatialPoints\")\nwp_sp_osun_nf <- as(wp_osun_nf, \"SpatialPoints\")\n\n\nwp_sp_osun_f\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_sp_osun_nf\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\nNext, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\nwp_ppp_osun_f <- as(wp_sp_osun_f, \"ppp\")\nwp_ppp_osun_f\n\nPlanar point pattern: 2630 points\nwindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n\n\n\nwp_ppp_osun_nf <- as(wp_sp_osun_nf, \"ppp\")\nwp_ppp_osun_nf\n\nPlanar point pattern: 2179 points\nwindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n\n\n\nsummary(wp_ppp_osun_f)\n\nPlanar point pattern:  2630 points\nAverage intensity 2.151545e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [177285.9, 290750.96] x [343128.1, 450859.7] units\n                    (113500 x 107700 units)\nWindow area = 12223800000 square units\n\n\n\nsummary(wp_ppp_osun_nf)\n\nPlanar point pattern:  2179 points\nAverage intensity 1.787766e-07 points per square unit\n\nCoordinates are given to 2 decimal places\ni.e. rounded to the nearest multiple of 0.01 units\n\nWindow: rectangle = [180538.96, 290616] x [340054.1, 450780.1] units\n                    (110100 x 110700 units)\nWindow area = 12188400000 square units\n\n\nCheck for duplicates.\n\nany(duplicated(wp_ppp_osun_f))\n\n[1] FALSE\n\n\n\nany(duplicated(wp_ppp_osun_nf))\n\n[1] FALSE\n\n\nyay! there is no duplicates.\n\nPlot water point data by Status\n\ntmap_mode(\"view\")\ntm_shape(wp_osun_f) +\n  tm_dots(alph = 0.7, \n          size=0.01,\n          palette = \"Dark2\",\n          col=\"status_clean\") +\n  tm_view(set.zoom.limits = c(8,11))\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(wp_osun_nf) +\n  tm_dots(alph = 0.7, \n          size=0.01,\n          palette = \"Dark2\",\n          col=\"status_clean\") +\n  tm_view(set.zoom.limits = c(8,11))\n\n\n\n\n\n\nNotice that there are some point that is outside of Osun, Nigeria area. This is because polygon data may contain geometrical inconsistencies such as self-intersections and overlaps. These inconsistencies must be removed to prevent problems in other spatstat functions. By default, polygon data will be repaired automatically using polygon-clipping code. The repair process may change the number of vertices in a polygon and the number of polygon components. With that, we will be using owin object in the next section to help us with that.\n\ntmap_mode('plot')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#kernel-density-estimation-kde",
    "title": "Take-home_Ex01",
    "section": "Kernel density estimation (KDE)",
    "text": "Kernel density estimation (KDE)\nKernel density estimation maps are considered best for location, size, shape and orientation of the hotspot.\nIn the hands-on excises, there are a few recommendation in using methods such as, bw.CvL(), bw.scott(), bw.ppl() or bw.diggle(). But before applying the methods, we learnt from our hands-on exe that we should rescale, so as to convert the meters to kilometers.\n\nkde_wpNGA_owin_f_bw.km <- rescale(wpNGA_owin_f, 1000, \"km\")\nkde_wpNGA_owin_nf_bw.km <- rescale(wpNGA_owin_nf, 1000, \"km\")\n\nIn spatstat, the functions bw.diggle(), bw.ppl(), and bw.scott() can be used to estimate the bandwidth according to difference methods. These functions run algorithms that aim to select an appropriate bandwith.\n\nFunctional\n\nbw.diggle(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.2521687 \n\n\n\nbw.ppl(kde_wpNGA_owin_f_bw.km)\n\n    sigma \n0.9192953 \n\n\n\nbw.scott(kde_wpNGA_owin_f_bw.km)\n\n sigma.x  sigma.y \n6.447815 6.379868 \n\n\n\n\nNon-Functional\n\nbw.diggle(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.3082061 \n\n\n\nbw.ppl(kde_wpNGA_owin_nf_bw.km)\n\n    sigma \n0.9737385 \n\n\n\nbw.scott(kde_wpNGA_owin_nf_bw.km)\n\n sigma.x  sigma.y \n6.338388 7.018473 \n\n\nAs we can see the Diggle algorithm gives us a narrower bandwidth for both functional and non-functional water point. However, Baddeley et (2016) suggest the use of the bw.ppl() algorithm because in their experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters.\nHence, in this take home, I decided to use ppl() for my analysis.\n\n\nkde_wpNGA_owin_bw_f <- density(kde_wpNGA_owin_f_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\nkde_wpNGA_owin_bw_nf <- density(kde_wpNGA_owin_nf_bw.km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpNGA_owin_bw_f)\nplot(kde_wpNGA_owin_bw_nf)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-patterns-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#st-order-spatial-point-patterns-analysis",
    "title": "Take-home_Ex01",
    "section": "1st order Spatial Point Patterns Analysis",
    "text": "1st order Spatial Point Patterns Analysis\nAs we are working with marked data, and we know that the values are categorical (different quality), we need to ensure that the marked field is of factor data type. However, as seen from the output, our subjective_quality field is of chr data type, not factor.\nBut before that, we need to extract #subjective_quality only in a spatialpoint dataframe format. to do that we can:\n\n#keeps <- c(\"#subjective_quality\")\n#wp_ifeeast = wp_functional[keeps]\n#wp_ifeeast_nf = wp_nonfunctional[keeps]\nwp_ifeeast<-subset(wp_functional, select = c(\"#subjective_quality\"))\nwp_ifeeast_nf<-subset(wp_nonfunctional, select = c(\"#subjective_quality\"))\n\n\n#wp_ifeeast <- select(wp_functional, )\n#wp_ifeeast_nf <- select(wp_nonfunctional, \"#subjective_quality\")\n\n\nwp_ifeeast_f <- as_Spatial(wp_ifeeast)\nwp_ifeeast_nfs <- as_Spatial(wp_ifeeast_nf)\n\n\nstr(wp_ifeeast_f)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 2630 obs. of  1 variable:\n  .. ..$ X.subjective_quality: chr [1:2630] \"Acceptable quality\" \"Acceptable quality\" \"Acceptable quality\" \"No because of Colour\" ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:2630, 1:2] 212810 228799 270498 212202 259332 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : NULL\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  ..@ bbox       : num [1:2, 1:2] 177286 343128 290751 450860\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  .. .. ..$ : chr [1:2] \"min\" \"max\"\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n  .. .. ..@ projargs: chr \"+proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,12\"| __truncated__\n  .. .. ..$ comment: chr \"PROJCRS[\\\"Minna / Nigeria Mid Belt\\\",\\n    BASEGEOGCRS[\\\"Minna\\\",\\n        DATUM[\\\"Minna\\\",\\n            ELLIPS\"| __truncated__\n\n\n\nwp_ifeeast_f@data$X.subjective_quality <- as.factor(wp_ifeeast_f@data$X.subjective_quality)\nwp_ifeeast_nfs@data$X.subjective_quality <- as.factor(wp_ifeeast_nfs@data$X.subjective_quality)\n\n\nstr(wp_ifeeast_f)\n\nFormal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots\n  ..@ data       :'data.frame': 2630 obs. of  1 variable:\n  .. ..$ X.subjective_quality: Factor w/ 4 levels \"Acceptable quality\",..: 1 1 1 2 1 1 1 2 1 1 ...\n  ..@ coords.nrs : num(0) \n  ..@ coords     : num [1:2630, 1:2] 212810 228799 270498 212202 259332 ...\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : NULL\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  ..@ bbox       : num [1:2, 1:2] 177286 343128 290751 450860\n  .. ..- attr(*, \"dimnames\")=List of 2\n  .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\"\n  .. .. ..$ : chr [1:2] \"min\" \"max\"\n  ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot\n  .. .. ..@ projargs: chr \"+proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,12\"| __truncated__\n  .. .. ..$ comment: chr \"PROJCRS[\\\"Minna / Nigeria Mid Belt\\\",\\n    BASEGEOGCRS[\\\"Minna\\\",\\n        DATUM[\\\"Minna\\\",\\n            ELLIPS\"| __truncated__\n\n\n\nwp_ifeeast_ppp_f <- as.ppp(wp_ifeeast_f)\nwp_ifeeast_ppp_nf <- as.ppp(wp_ifeeast_nfs)\n\n\nPlot ppp chart with marked\nIn this section, I will be using ife east owin object. We will be looking at:\n\nife east quality of water in functional\nife east quality of water in non functional\n\n\nife_east_marked_ppp <- wp_ifeeast_ppp_f[ife_east_owin]\nife_east_marked_ppp_nf <- wp_ifeeast_ppp_nf[ife_east_owin]\n\n\npar(mfrow=c(1,2))\nplot(ife_east_marked_ppp, main = \"ife east F\", which.marks = \"X.subjective_quality\")\nplot(ife_east_marked_ppp_nf, main = \"ife east NF\", which.marks = \"X.subjective_quality\")\n\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp, 1000)))))\n\n\n\n\n\nplot((density(split(rescale(ife_east_marked_ppp_nf, 1000)))))\n\n\n\n\nBased on the graphs above, acceptable quality and cause of taste seems to have a stronger complementary relationship with each other in ife east area for both functional and non functional area. However, Acceptable quality being the most strong ones due to the scale."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-multi-type-point-pattern-analysis-cross-l-function",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#nd-order-multi-type-point-pattern-analysis-cross-l-function",
    "title": "Take-home_Ex01",
    "section": "2nd order multi type Point pattern Analysis: Cross L-function",
    "text": "2nd order multi type Point pattern Analysis: Cross L-function\nIn this section, hypothesis testing will be conducted utilising second-order statistics (L function), to assess if the spatial distribution of functional and non-functional water points are independent from each other.\nWe will be using cross L-function to look into the relationship.\n\nH0: The distribution of the acceptable quality and cause of taste in ife east are spatially independent.\nH1: The distribution of the acceptable quality and cause of taste in ife east are spatially not independent.\nConfidence level: 95%\nSignificance level: 0.05\n\nIn the below section, I will be comparing ife east functional and non functional (Acceptance quality and Cause of taste)\n\nife east functional\n\nplot(Lcross(ife_east_marked_ppp, \"Acceptable quality\", \"No because of Taste\"))\n\n\n\n\nThe plot above reveals that there is a sign that the marked spatial point events are not independent spatially.\nWe will conduct a randomisation test of the Random Labelling Property.\n\nshuffle<- expression(rlabel(ife_east_marked_ppp))\nmontef_Lcross_ifeeast <- envelope(ife_east_marked_ppp, Lcross, nsim=39, simulate=shuffle, i=\"Acceptable quality\", j=\"No because of Taste\", correction=\"border\")\n\nGenerating 39 simulations by evaluating expression  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(montef_Lcross_ifeeast, xlab=\"distance(m)\")\n\n\n\n\nThe plot above reveals that the are signs that the distribution of functional water point for acceptable quality and cause of taste are not independent spatially. Unfortunately, we failed to reject the null hypothesis because the L-cross line is within the envelop of the 95% confident interval.\n\n\nife east non functional\n\nplot(Lcross(ife_east_marked_ppp_nf, \"Acceptable quality\", \"No because of Taste\"))\n\n\n\n\n\nshuffle<- expression(rlabel(ife_east_marked_ppp_nf))\nmontenf_Lcross_ifeeast <- envelope(ife_east_marked_ppp_nf, Lcross, nsim=39, simulate=shuffle, i=\"Acceptable quality\", j=\"No because of Taste\", correction=\"border\")\n\nGenerating 39 simulations by evaluating expression  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,  39.\n\nDone.\n\n\n\nplot(montenf_Lcross_ifeeast, xlab=\"distance(m)\")\n\n\n\n\nThe plot above reveals that the are signs that the distribution of non functional water point for acceptable quality and cause of taste are not independent spatially. Unfortunately, we failed to reject the null hypothesis because the L-cross line is within the envelop of the 95% confident interval."
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html",
    "title": "In-Class Ex06",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, tmap, spdep, sfdep)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#import-geospatial-data",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#import-geospatial-data",
    "title": "In-Class Ex06",
    "section": "Import geospatial data",
    "text": "Import geospatial data\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex06\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#join-data",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#join-data",
    "title": "In-Class Ex06",
    "section": "Join data",
    "text": "Join data\nif want to retain the geometry, no geometry data should be on the left.\n\nhunan_GDPPC <- left_join(hunan,hunan2012)%>%\n  select(1:4, 7, 15)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#chloropleth-plot",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#chloropleth-plot",
    "title": "In-Class Ex06",
    "section": "Chloropleth Plot",
    "text": "Chloropleth Plot\n\ntm_shape(hunan_GDPPC)+\n  tm_fill(\"GDPPC\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"GDPPC\") +\n  tm_layout(main.title = \"Distribution of GDP per capital by district\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#computing-contiguity-spatial-weights",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#computing-contiguity-spatial-weights",
    "title": "In-Class Ex06",
    "section": "Computing Contiguity Spatial Weights",
    "text": "Computing Contiguity Spatial Weights\nknowing the neighbour\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n        .before = 1)\n\n\ncn_rook <- hunan_GDPPC %>% \n    mutate(nb= st_contiguity(geometry),\n           queen = FALSE,\n        .before = 1)"
  },
  {
    "objectID": "inclass_ex/inclass_ex06/inclass_ex06.html#contiguity-weights-queens-method",
    "href": "inclass_ex/inclass_ex06/inclass_ex06.html#contiguity-weights-queens-method",
    "title": "In-Class Ex06",
    "section": "Contiguity weights: Queen’s method",
    "text": "Contiguity weights: Queen’s method\ncombining the weights together with contiguity in a single code chunk.\n\ncn_queen <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n         wt = st_weights(nb),\n        .before = 1)"
  },
  {
    "objectID": "handson_ex/handson_ex07a/handson_ex07a.html",
    "href": "handson_ex/handson_ex07a/handson_ex07a.html",
    "title": "Hands-On Ex07a - Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex07a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nIn the below code, we will be using left_join()\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\n\n\n\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area.\n*** The spatial weights is used to define the neighbourhood relationships between the geographical units.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.\nNOTE! you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n\nIn our case, each neighboring polygon will be assigned equal weight (style=“W”) for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\nExamine the simulated Moran’s test stats in greater details.\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\nThe histogram shows a normal distribution range there are a few outliers which lies at around 0.3.\n\n\n\nperforming Geary’s C test\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\nAs compared with the Moran’s I histogram, both are normally distibuted. However, for Geary C, it is more standardized as there are no outliers at both ends.\n\n\n\n\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They are very useful as an exploratory and descriptive tool.\n\n\n\nThe code below is used to compute a 6-lag spatial correlogram of GDPPC.\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nMoran’s I and Geary’s c are well known tests for spatial autocorrelation. They represent two special cases of the general cross-product statistic that measures spatial autocorrelation. Moran’s I is produced by standardizing the spatial autocovariance by the variance of the data. Geary’s c uses the sum of the squared differences between pairs of data values as its measure of covariation. Both of these statistics depend on a spatial structural specification such as a spatial weights matrix or a distance related decline function."
  },
  {
    "objectID": "handson_ex/handson_ex07b/handson_ex07b.html",
    "href": "handson_ex/handson_ex07b/handson_ex07b.html",
    "title": "Hands-On Ex07b - Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\handson_ex\\handson_ex07b\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\nhunan <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nVisualising Regional Developement Indicator\n\nequal <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\nwm_q <- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\n\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nComputing Monte Carlo Moran’s I\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] -0.01504572\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.004371574\n\n\n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nComputing Monte Carlo Geary’s C\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nmean(bperm$res[1:999])\n\n[1] 1.004402\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.007436493\n\n\n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nMI_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\nGC_corr <- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\nLISA are statistics that evaluate the existence of clusters in the spatial arrangement of a given variable\nFor instance if we are studying cancer rates among census tracts in a given city local clusters in the rates mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nNOTE!\nWill learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n\n\n\nfips <- order(hunan$County)\nlocalMI <- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\n\nappend the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame\n\nhunan.localMI <- cbind(hunan,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe choropleth shows the evidence for both positive and negative values in li.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nCreating LISA cluster map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation\n\n\nPlotting Moran’s scatter plot ( this is v cool!)\n\nnci <- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n\n\nMoran Scatter plot with standardised variable\n\nhunan$Z.GDPPC <- scale(hunan$GDPPC) %>% \n  as.vector \n\n\nnci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nhunan$lag_GDPPC <- lag.listw(rswm_q, hunan$GDPPC)\nDV <- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nLM_I <- localMI[,1] - mean(localMI[,1])    \n\nwe will set a statistical significance level for the local Moran.\n\nsignif <- 0.05       \n\n\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n\nplace non-significant Moran in the category 0\n\nquadrant[localMI[,5]>signif] <- 0\n\n\n\n\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\nCombine the charts side by side\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\nlocalMI.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\n\n\n\n\n\n\nThe Hot Spot Analysis tool calculates the Getis-Ord Gi* statistic (pronounced G-i-star) for each feature in a dataset. The resultant z-scores and p-values tell you where features with either high or low values cluster spatially.\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\nA feature with a high value is interesting but may not be a statistically significant hot spot. To be a statistically significant hot spot, a feature will have a high value and be surrounded by other features with high values as well. The local sum for a feature and its neighbors is compared proportionally to the sum of all features; when the local sum is very different from the expected local sum, and when that difference is too large to be the result of random chance, a statistically significant z-score results.\n\n\nIt looks at neighbours within a defined proximity to identify where either high or low values clutser spatially.\n\n\n\nFirst, we need to define a new set of neighbours.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\nWe need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length.\n\nlongitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nlatitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\ncoords <- cbind(longitude, latitude)\n\n\n\n\nDetermine the cut-off distance\nFirstly, we need to determine the upper limit for distance band\n\n#coords <- coordinates(hunan)\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n\nwm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nnb2listw() is used to convert the nb object into spatial weights object.\n\nwm62_lw <- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\n\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\nknn <- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\n\nknn_lw <- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\n\n\nGi statistic using Fixed distance\n\nfips <- order(hunan$County)\ngi.fixed <- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters. We will join the Gi values to their corresponding hunan sf data frame.\nFor statistically significant positive z-scores, the larger the z-score is, the more intense the clustering of high values (hot spot). For statistically significant negative z-scores, the smaller the z-score is, the more intense the clustering of low values (cold spot). For more information about determining statistical significance and correcting for multiple testing and spatial dependency.\n\nhunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\nThe code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n\ngdppc <- qtm(hunan, \"GDPPC\")\n\nGimap <-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nfips <- order(hunan$County)\ngi.adaptive <- localG(hunan$GDPPC, knn_lw)\nhunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n\ngdppc<- qtm(hunan, \"GDPPC\")\n\nGimap <- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html",
    "title": "Inclass-On Ex07",
    "section": "",
    "text": "pacman::p_load(tidyverse, sf, tmap, spdep, sfdep, plotly)\n\n\nhunan <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `C:\\yifei-alpaca\\IS415-GAA\\inclass_ex\\inclass_ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#relational-join",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#relational-join",
    "title": "Inclass-On Ex07",
    "section": "Relational Join",
    "text": "Relational Join\n\nhunan_GDPPC <- left_join(hunan,hunan2012) %>%\n  select(1:4, 7, 15)\n\nPlot map\n\ntm_shape(hunan_GDPPC) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#deriving-contiguity-weights-queens-method",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#deriving-contiguity-weights-queens-method",
    "title": "Inclass-On Ex07",
    "section": "Deriving contiguity weights Queen’s method",
    "text": "Deriving contiguity weights Queen’s method\n\nwm_q <- hunan_GDPPC %>%\n  mutate(nb= st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style= \"W\"),\n        .before = 1)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-global-moran-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-global-moran-i",
    "title": "Inclass-On Ex07",
    "section": "Computing Global Moran I",
    "text": "Computing Global Moran I\n\nmoranI <- global_moran(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-test",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-test",
    "title": "Inclass-On Ex07",
    "section": "Performing Global Moran I test",
    "text": "Performing Global Moran I test\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt\n                  )\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-permutation-test",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#performing-global-moran-i-permutation-test",
    "title": "Inclass-On Ex07",
    "section": "Performing Global Moran I permutation test",
    "text": "Performing Global Moran I permutation test\n\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim =99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value < 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-local-moran-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-local-moran-i",
    "title": "Inclass-On Ex07",
    "section": "Computing Local Moran I",
    "text": "Computing Local Moran I\nunnest() is important\nwe will use either mean or pysal\np_ii_sim = after running the simulation test (use after several trial to ensure stability)\n\nlisa <- wm_q %>% \n  mutate(local_moran= local_moran(\n    GDPPC,nb, wt,nsim = 99),\n          .before = 1) %>% \n      unnest(local_moran)\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii   var_ii    z_ii    p_ii p_ii_…¹ p_fol…² skewn…³ kurtosis\n      <dbl>      <dbl>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>    <dbl>\n 1 -0.00147  0.00177    4.18e-4 -0.158  0.874      0.82    0.41  -0.812  0.652  \n 2  0.0259   0.00641    1.05e-2  0.190  0.849      0.96    0.48  -1.09   1.89   \n 3 -0.0120  -0.0374     1.02e-1  0.0796 0.937      0.76    0.38   0.824  0.0461 \n 4  0.00102 -0.0000349  4.37e-6  0.506  0.613      0.64    0.32   1.04   1.61   \n 5  0.0148  -0.00340    1.65e-3  0.449  0.654      0.5     0.25   1.64   3.96   \n 6 -0.0388  -0.00339    5.45e-3 -0.480  0.631      0.82    0.41   0.614 -0.264  \n 7  3.37    -0.198      1.41e+0  3.00   0.00266    0.08    0.04   1.46   2.74   \n 8  1.56    -0.265      8.04e-1  2.04   0.0417     0.08    0.04   0.459 -0.519  \n 9  4.42     0.0450     1.79e+0  3.27   0.00108    0.02    0.01   0.746 -0.00582\n10 -0.399   -0.0505     8.59e-2 -1.19   0.234      0.28    0.14  -0.685  0.134  \n# … with 78 more rows, 12 more variables: mean <fct>, median <fct>,\n#   pysal <fct>, nb <nb>, wt <list>, NAME_2 <chr>, ID_3 <int>, NAME_3 <chr>,\n#   ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>, geometry <POLYGON [°]>, and\n#   abbreviated variable names ¹​p_ii_sim, ²​p_folded_sim, ³​skewness"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#plot-mapping",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#plot-mapping",
    "title": "Inclass-On Ex07",
    "section": "Plot mapping",
    "text": "Plot mapping\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha= 0.5) +\n  tm_view(set.zoom.limits = c(6,8))\n\n\n\n\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") +\n  tm_borders(alpha= 0.5)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#visualising-local-morans-i",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#visualising-local-morans-i",
    "title": "Inclass-On Ex07",
    "section": "Visualising local Moran’s I",
    "text": "Visualising local Moran’s I\n\nlisa_sig <- lisa %>% \n  filter(p_ii <0.05)\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha= 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha= 0.4)"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#hot-and-cold-spot-analysis",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#hot-and-cold-spot-analysis",
    "title": "Inclass-On Ex07",
    "section": "Hot and Cold spot analysis",
    "text": "Hot and Cold spot analysis\n\nHCSA <- wm_q %>% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb, wt, nsim= 99),\n      .before =1) %>% \n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 16 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 17\n    gi_star   e_gi     var_gi  p_value p_sim p_fol…¹ skewn…² kurto…³ nb    wt   \n      <dbl>  <dbl>      <dbl>    <dbl> <dbl>   <dbl>   <dbl>   <dbl> <nb>  <lis>\n 1 -0.00567 0.0115 0.00000812  9.95e-1  0.82    0.41   1.03    1.23  <int> <dbl>\n 2 -0.235   0.0110 0.00000581  8.14e-1  1       0.5    0.912   1.05  <int> <dbl>\n 3  0.298   0.0114 0.00000776  7.65e-1  0.7     0.35   0.455  -0.732 <int> <dbl>\n 4  0.145   0.0121 0.0000111   8.84e-1  0.64    0.32   0.900   0.726 <int> <dbl>\n 5  0.356   0.0113 0.0000119   7.21e-1  0.64    0.32   1.08    1.31  <int> <dbl>\n 6 -0.480   0.0116 0.00000706  6.31e-1  0.82    0.41   0.364  -0.676 <int> <dbl>\n 7  3.66    0.0116 0.00000825  2.47e-4  0.02    0.01   0.909   0.664 <int> <dbl>\n 8  2.14    0.0116 0.00000714  3.26e-2  0.16    0.08   1.13    1.48  <int> <dbl>\n 9  4.55    0.0113 0.00000656  5.28e-6  0.02    0.01   1.36    4.14  <int> <dbl>\n10  1.61    0.0109 0.00000341  1.08e-1  0.18    0.09   0.269  -0.396 <int> <dbl>\n# … with 78 more rows, 7 more variables: NAME_2 <chr>, ID_3 <int>,\n#   NAME_3 <chr>, ENGTYPE_3 <chr>, County <chr>, GDPPC <dbl>,\n#   geometry <POLYGON [°]>, and abbreviated variable names ¹​p_folded_sim,\n#   ²​skewness, ³​kurtosis\n\n\nVisualising p-value of HCSA\n\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_fill(\"p_sim\") +\n  tm_borders(alpha= 0.5) +\n  tm_view(set.zoom.limits = c(6,8))"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#emerging-hotspot-analysis",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#emerging-hotspot-analysis",
    "title": "Inclass-On Ex07",
    "section": "Emerging hotspot analysis",
    "text": "Emerging hotspot analysis\ncan refer to megan’s work\ncan use plotly for interaction map\n\nGDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n\nthis code is to create an spatio-temporal cube\n\nGDPPC_st <- spacetime(GDPPC,hunan, \n                      .loc_col = \"County\",\n                      .time_col =\"Year\")\n\n\nGDPPC_nb <- GDPPC_st %>% \n  activate(\"geometry\") %>% \n  mutate(\n    nb = include_self(st_contiguity(geometry)),\n    wt = st_weights(nb)\n  ) %>% \n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")"
  },
  {
    "objectID": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-gi",
    "href": "inclass_ex/inclass_ex07/inclass_ex07.html#computing-gi",
    "title": "Inclass-On Ex07",
    "section": "Computing Gi",
    "text": "Computing Gi\n\ngi_star <- GDPPC_nb %>% \n  group_by(Year) %>% \n  mutate(gi_star = local_gstar_perm(\n    GDPPC, nb, wt, nsim= 99)) %>% \n  tidyr::unnest(gi_star)\n\nif want to categories, we can combine all the value together and use emerging_hotspot_analysis() function."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "“The question is where are the sub-districts with relatively higher number of vaccination rate and how they changed over time.”"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#joining-the-attribute-data-and-geospatial-data",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#joining-the-attribute-data-and-geospatial-data",
    "title": "Take Home Ex 2",
    "section": "Joining the attribute data and geospatial data",
    "text": "Joining the attribute data and geospatial data\nBefore we can perform georelational join, one extra step is required to check which column can be join together. After looking at both dataset, we can join by KODE KELURAHAN in FY21_22Vaccine to CODE_DESA in jakarta dataset.\n\njakarta_vaccine <- left_join(jakarta, FY21_22Vaccine,\n                          by = c(\"KODE_DESA\" = \"KODE KELURAHAN\"))\n\nConvert to sf objects\n\njakarta_vaccine <- st_as_sf(jakarta_vaccine)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#section",
    "title": "Take Home Ex 2",
    "section": "",
    "text": "Visualizing EHSA\n\njakarta_ehsa <- left_join(jakarta, ehsa, by=\"DESA\")\n\n\nehsa_sig <- jakarta_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(jakarta_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n\n\n\n\nFrom the graph we can see that no pattern detected has fall in many of the sub district area of the hot/cold spot pattern. Second highest would be persistent cold spot, based on this link it refers to these location has been statistically significant cold spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering of counts over time. Third highest would be persistent hot spot, which refers to a location that has been a statistically significant hot spot for 90 percent of the time-step intervals with no discernible trend in the intensity of clustering over time. Fourth would be sporadic hot spot, which means a statistically significant hot spot for the final time-step interval with a history of also being an on-again and off-again hot spot. Less than 90 percent of the time-step intervals have been statistically significant hot spots and none of the time-step intervals have been statistically significant cold spots.\nFor cold spot area, although they are not in the most populated area. However, there are a few strategies can be implemented by the government. Firstly, It is important to educate the public about the importance of getting vaccinated, the benefits of the vaccines, and dispelling any myths or misconceptions. This can be done through various channels such as social media, television, radio, and billboards. Next is setting up mobile vaccination sites in various districts can make it easier for people to get vaccinated, especially for those who have mobility issues or those who live far away from vaccination centers.\nWith that, thank you for this takehome2! :)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#population-choropleth-map",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#population-choropleth-map",
    "title": "Take Home Ex 2",
    "section": "Population choropleth map",
    "text": "Population choropleth map\nMaking the chart interactive so that we can see which sub district has the largest population and we can analyse it further in the below section.\n\ntmap_mode(\"view\")\n\nqtm(jakarta_vaccine, \n    fill = \"JUMLAH_PEN\",\n        text= \"KELURAHAN\",\n    text.size = 0.5)\n\n\n\n\n\ntmap_mode(\"plot\")\n\n\njul21total = data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month =  ymd(\"2021-07-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_jul21,\n                          population = jakarta_vaccine$JUMLAH_PEN,\n                           geometry = jakarta_vaccine$geometry\n                           )\n\naug21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-08-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_aug21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nsep21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-09-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_sep21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\noct21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-10-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_oct21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nnov21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-11-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_nov21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\ndec21total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2021-12-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_dec21,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\n\njan22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-01-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_jan22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nfeb22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-02-28\"),\n                           TotalDose = jakarta_vaccine$TotalV_feb22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nmar22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-03-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_mar22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\napr22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-04-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_apr22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\nmay22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-05-31\"),\n                           TotalDose = jakarta_vaccine$TotalV_may22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\njun22total <- data.frame(SubDistrict = jakarta_vaccine$KELURAHAN,\n                            Month = ymd(\"2022-06-30\"),\n                           TotalDose = jakarta_vaccine$TotalV_jun22,\n                         population = jakarta_vaccine$JUMLAH_PEN,\n                         geometry = jakarta_vaccine$geometry)\n\n\ntotal_vaccine <- rbind(jul21total, aug21total,sep21total,oct21total,nov21total,dec21total,jan22total,feb22total,mar22total,apr22total,may22total,jun22total)\n\nAs we know that there are 200 plus subdistrict,I decided to plot TOP 5 and BOTTOM 5 populated sub district.\n\nagg_tbl <- total_vaccine %>% group_by(SubDistrict) %>% \n  summarise(sum_pop = sum(population),\n            .groups = 'drop')\nagg_tbl\n\n# A tibble: 261 × 2\n   SubDistrict     sum_pop\n   <chr>             <dbl>\n 1 ANCOL            358632\n 2 ANGKE            437136\n 3 BALE KAMBANG     424512\n 4 BALI MESTER      140340\n 5 BAMBU APUS       381288\n 6 BANGKA           315132\n 7 BARU             352668\n 8 BATU AMPAR       706680\n 9 BENDUNGAN HILIR  325728\n10 BIDARA CINA      542328\n# … with 251 more rows\n\nagg_tbl <- agg_tbl[order(-agg_tbl$sum_pop),]\n\n\nbarplot(agg_tbl$sum_pop[1:5],names.arg=agg_tbl$SubDistrict[1:5], cex.lab = 0.5)\n\n\n\n\nFinding the Bottom 5 sub district\n\nagg_tbl <- agg_tbl[order(agg_tbl$sum_pop),]\n\nbarplot(agg_tbl$sum_pop[1:5],names.arg=agg_tbl$SubDistrict[1:5], cex.lab = 0.5)\n\n\n\n\nAs we can see from the graph above, the west side of Jakarta(Kapuk, Tegal Alur, Cekareng Timur) is more dense as compared to the rest of the region. This shows that there are more population in the west area followed by east area."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-dose-1-to-3",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-dose-1-to-3",
    "title": "Take Home Ex 2",
    "section": "Visualizing Dose 1 to 3",
    "text": "Visualizing Dose 1 to 3\nLets visualize our combined data in terms of total dose 1,2 and 3. A basic goal of a classification scheme is to group together similar observations and split apart observations that are substantially different.\nBased on the skewness below, we can see that all more positively skewed towards the right which means it is not appropriate to use equal and quartile methods.\n\nskewness(jakarta_vaccine$D1_jul21)\n\n[1] 0.9797892\n\nskewness(jakarta_vaccine$D1_aug21)\n\n[1] 1.085893\n\nskewness(jakarta_vaccine$D1_sep21)\n\n[1] 1.072417\n\nskewness(jakarta_vaccine$D1_oct21)\n\n[1] 1.060235\n\nskewness(jakarta_vaccine$D1_nov21)\n\n[1] 1.070041\n\nskewness(jakarta_vaccine$D1_dec21)\n\n[1] 1.08138\n\nskewness(jakarta_vaccine$D1_jan22)\n\n[1] 1.081787\n\nskewness(jakarta_vaccine$D1_feb22)\n\n[1] 1.083661\n\nskewness(jakarta_vaccine$D1_mar22)\n\n[1] 1.08686\n\nskewness(jakarta_vaccine$D1_apr22)\n\n[1] 1.087654\n\nskewness(jakarta_vaccine$D1_may22)\n\n[1] 1.087841\n\nskewness(jakarta_vaccine$D1_jun22)\n\n[1] 1.088754\n\n\n\nskewness(jakarta_vaccine$D2_jul21)\n\n[1] 0.8387278\n\nskewness(jakarta_vaccine$D2_aug21)\n\n[1] 0.9088209\n\nskewness(jakarta_vaccine$D2_sep21)\n\n[1] 1.015658\n\nskewness(jakarta_vaccine$D2_oct21)\n\n[1] 1.021767\n\nskewness(jakarta_vaccine$D2_nov21)\n\n[1] 1.023198\n\nskewness(jakarta_vaccine$D2_dec21)\n\n[1] 1.018473\n\nskewness(jakarta_vaccine$D2_jan22)\n\n[1] 1.018324\n\nskewness(jakarta_vaccine$D2_feb22)\n\n[1] 1.021613\n\nskewness(jakarta_vaccine$D2_mar22)\n\n[1] 1.019545\n\nskewness(jakarta_vaccine$D2_apr22)\n\n[1] 1.023047\n\nskewness(jakarta_vaccine$D2_may22)\n\n[1] 1.023062\n\nskewness(jakarta_vaccine$D2_jun22)\n\n[1] 1.024074\n\n\nIn the following code chunck, I will be using Natural Breaks (Jenks) method and will be classifying into 6 classes for my analysis. Natural Breaks are good for mapping values that are not evenly distributed on a histogram which is is suitable in our case.\nThe below code is a function to help us iterate multiple times, limiting the amount of large code.\n\njenks_plot <- function(df, varname) {\n  tm_shape(jakarta_vaccine) +\n    tm_polygons() +\n  tm_shape(df) +\n    tm_fill(varname, \n          n= 6,\n          style = \"jenks\", \n          title = \"No of people vaccinated\") +\n    tm_layout(main.title = varname,\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\nLets visualize the data in months:\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_jul21\"),\n             jenks_plot(jakarta_vaccine, \"D2_jul21\"),\n             jenks_plot(jakarta_vaccine, \"D1_aug21\"),\n             jenks_plot(jakarta_vaccine, \"D2_aug21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_sep21\"),\n             jenks_plot(jakarta_vaccine, \"D2_sep21\"),\n             jenks_plot(jakarta_vaccine, \"D1_oct21\"),\n             jenks_plot(jakarta_vaccine, \"D2_oct21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_nov21\"),\n             jenks_plot(jakarta_vaccine, \"D2_nov21\"),\n             jenks_plot(jakarta_vaccine, \"D1_dec21\"),\n             jenks_plot(jakarta_vaccine, \"D2_dec21\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_jan22\"),\n             jenks_plot(jakarta_vaccine, \"D2_jan22\"),\n             jenks_plot(jakarta_vaccine, \"D1_feb22\"),\n             jenks_plot(jakarta_vaccine, \"D2_feb22\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_mar22\"),\n             jenks_plot(jakarta_vaccine, \"D2_mar22\"),\n             jenks_plot(jakarta_vaccine, \"D1_apr22\"),\n             jenks_plot(jakarta_vaccine, \"D2_apr22\"))\n\n\n\n\n\ntmap_arrange(jenks_plot(jakarta_vaccine, \"D1_may22\"),\n             jenks_plot(jakarta_vaccine, \"D2_may22\"),\n             jenks_plot(jakarta_vaccine, \"D1_jun22\"),\n             jenks_plot(jakarta_vaccine, \"D2_jun22\"))\n\n\n\n\nAs compare the charts above, it is a little hard to visualized. We will be using a gif maker tool to compile the images and see the difference. (this idea credits to our senior megan) ezgif\nThe GIF below is for Dose 1 by months. Based on the image, we can see that July 2021 is particularly more dense as compared to other months.\n\n\n\n\n\nThe GIF below shows Dose 2 by months. Based on the image, we can see that July and August 2021 is particularly more dense as compared to other months.\n\n\n\n\n\nThe GIF below shows Dose 3 by months. Based on the image, we can see that April to Jun 2022 are particularly more dense compared to other months.\n\n\n\n\n\nThe COVID-19 vaccination program in Jakarta, Indonesia started on January 13, 2021. The first doses of the vaccine were given to healthcare workers in several hospitals across Jakarta. The vaccination program was rolled out in phases, with priority given to healthcare workers, public service officers, and the elderly population. On 1 April 2021, the Ministry of Health announced the postponement of the vaccination schedule for the general public to June or July because of a vaccine shortage. On 14 July, the daily number of people vaccinated crossed two million mark for the first time. This could probably show that why July 2021 is more dense for Dose 1 and 2. We can see that Jakarta Barat which is the west area has a higher vaccination rate.\nWe can also see the difference in Dose 1 and Dose 2 rate, the threshold are much higher for dose 1 as compared to dose 2. One factor is vaccine hesitancy or a lack of access to the second dose. Some individuals may be hesitant to get the second dose due to concerns about side effects, while others may face barriers in accessing the vaccine, such as limited availability or difficulty scheduling appointments.\nFor Dose 3, we can see an interesting increase dense pattern from April 2022 to Jun 2022. As time goes by, studies have shown that vaccination can increase protection against COVID-19 and its variants, particularly among older adults and those with weakened immune systems. It can help increase the level of antibodies in the body, which can provide added protection against the virus. Thus, this probably drives residents to take booster shots. Another factor could be the government may have expanded the eligibility criteria for booster shots, allowing more people to receive them. Initially, the booster shots were provided to healthcare workers and elderly individuals, but the government may have opened up the booster program to other groups."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-overall-vaccination-rate",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#visualizing-overall-vaccination-rate",
    "title": "Take Home Ex 2",
    "section": "Visualizing Overall Vaccination rate",
    "text": "Visualizing Overall Vaccination rate\nSince we have visualized the Dose pattern. Now let’s find out which area has the most number of people who have vaccinated. But before that, we can check the skewness of the data.\nLooks like mostly all are more positively skewed towards the right which means it is not appropriate to use equal methods.\n\nskewness(jakarta_vaccine$TotalV_jul21)\n\n[1] 0.8814528\n\nskewness(jakarta_vaccine$TotalV_aug21)\n\n[1] 1.005361\n\nskewness(jakarta_vaccine$TotalV_sep21)\n\n[1] 1.045357\n\nskewness(jakarta_vaccine$TotalV_oct21)\n\n[1] 1.041591\n\nskewness(jakarta_vaccine$TotalV_nov21)\n\n[1] 1.047173\n\nskewness(jakarta_vaccine$TotalV_dec21)\n\n[1] 1.050825\n\nskewness(jakarta_vaccine$TotalV_jan22)\n\n[1] 1.050915\n\nskewness(jakarta_vaccine$TotalV_feb22)\n\n[1] 1.053374\n\nskewness(jakarta_vaccine$TotalV_mar22)\n\n[1] 1.033162\n\nskewness(jakarta_vaccine$TotalV_apr22)\n\n[1] 1.0492\n\nskewness(jakarta_vaccine$TotalV_may22)\n\n[1] 1.044524\n\nskewness(jakarta_vaccine$TotalV_jun22)\n\n[1] 1.043669\n\n\nSimilar as Dose 1 to 3, we will use Jenks classification methods. Since we have created a function earlier, we can just map it accordingly.\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_jul21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_aug21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_sep21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_oct21\"))\n\n\n\n\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_nov21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_dec21\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_jan22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_feb22\"))\n\n\n\n\n\ntmap_mode(\"plot\")\ntmap_arrange(jenks_plot(jakarta_vaccine, \"TotalV_mar22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_apr22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_may22\"),\n             jenks_plot(jakarta_vaccine, \"TotalV_jun22\"))\n\n\n\n\nLet us check for the sub-disrticts with the highest cases rate at the early and later stage.\nEarly stage:\n\njakarta_vaccine$KELURAHAN[which.max(jakarta_vaccine$TotalV_jul21)]\n\n[1] \"KAPUK\"\n\n\nLater stage:\n\njakarta_vaccine$KELURAHAN[which.max(jakarta_vaccine$TotalV_jun22)]\n\n[1] \"KAPUK\"\n\n\nBased on the which.max function, it gave us the same results that district KAPUK has the highest vaccination rate consistently.\nFor curiosity sake, lets find out which has the lowest vaccination rate.\n\njakarta_vaccine$KELURAHAN[which.min(jakarta_vaccine$TotalV_jul21)]\n\n[1] \"GAMBIR\"\n\n\n\njakarta_vaccine$KELURAHAN[which.min(jakarta_vaccine$TotalV_jun22)]\n\n[1] \"GAMBIR\"\n\n\n\njakarta <- st_transform(jakarta, 4326)\nlongitude <- map_dbl(jakarta$geometry, ~st_centroid(.x)[[1]])\nlatitude <- map_dbl(jakarta$geometry, ~st_centroid(.x)[[2]])\ncoords <- cbind(longitude, latitude)\n\n\n\n\nWith the results shown above, we can say that the higher the population, the higher the vaccination rate."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-gi-with-sig-0.5",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#mapping-local-gi-with-sig-0.5",
    "title": "Take Home Ex 2",
    "section": "Mapping Local Gi with sig < 0.5",
    "text": "Mapping Local Gi with sig < 0.5\n\ntmap_mode(\"plot\")\ntm_shape(jv.localGi_jun22) +\n    tm_polygons() +\n    tm_shape(jv.localGi_jun22 %>% filter(p_value < 0.05)) +\n    tm_fill(col= \"p_value\",\n             palette = \"Paired\") +\n    tm_borders(alpha = 0.4) +\n    tm_layout(main.title = paste(\"local Gi p-value <0.05 JUN22\"),\n              main.title.size = 1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-functions-and-maps",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#create-functions-and-maps",
    "title": "Take Home Ex 2",
    "section": "Create functions and Maps",
    "text": "Create functions and Maps\n\nlocalgi_plot <- function(df, varname) {\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df %>% filter(p_value < 0.05)) +\n    tm_fill(varname, \n          palette = \"Paired\") +\n    tm_layout(\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\n\ntmap_arrange(localgi_plot(jv.localGi_jul21, \"p_value\"),\n             localgi_plot(jv.localGi_aug21, \"p_value\"),\n             localgi_plot(jv.localGi_sep21, \"p_value\"),\n             localgi_plot(jv.localGi_oct21, \"p_value\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_plot(jv.localGi_nov21, \"p_value\"),\n             localgi_plot(jv.localGi_dec21, \"p_value\"),\n             localgi_plot(jv.localGi_jan22, \"p_value\"),\n             localgi_plot(jv.localGi_feb22, \"p_value\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_plot(jv.localGi_mar22, \"p_value\"),\n             localgi_plot(jv.localGi_apr22, \"p_value\"),\n             localgi_plot(jv.localGi_may22, \"p_value\"),\n             localgi_plot(jv.localGi_jun22, \"p_value\")\n             )\n\n\n\n\nLet’s put them in to a gif for better comparison\n\n\n\n\n\nA tmap above displays the total vaccine parameter by month estimates for vaccination rates in sub district that are statistically significant (p < 0.05); However, based on the tmap above, we can see that Jakarta Barat & Pusat the west & central area has been constantly very significant over a year. As for the grey area, it shows not significant."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#hot-and-cold-spot-for-local-gi",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#hot-and-cold-spot-for-local-gi",
    "title": "Take Home Ex 2",
    "section": "Hot and Cold Spot for Local Gi",
    "text": "Hot and Cold Spot for Local Gi\nIn this section, Hot and Cold spot will be prepared.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings.\nIt looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nLets re create a function for hot and cold spot.\n\nlocalgi_HCplot <- function(df, varname) {\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df %>% filter(p_value < 0.05)) +\n    tm_fill(varname,\n            palette = \"-RdBu\") +\n    tm_layout(\n          legend.height = 0.45, \n          legend.width = 0.35,\n          frame = TRUE) +\n    tm_borders(alpha = 0.2)\n}\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_jul21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_aug21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_sep21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_oct21, \"gi_star\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_nov21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_dec21, \"gi_star\"),\n             localgi_HCplot(jv.localGi_jan22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_feb22, \"gi_star\")\n             )\n\n\n\n\n\ntmap_arrange(localgi_HCplot(jv.localGi_mar22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_apr22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_may22, \"gi_star\"),\n             localgi_HCplot(jv.localGi_jun22, \"gi_star\")\n             )\n\n\n\n\n\nIn general, for hot spot, we can see that its is generally at Jakarta Barat which is the WEST area across the year while the cold spot are usually at Jakarta Pusat which is the CENTER area. This findings also aligns wells with the population analysis and p-value analysis in the previous section. There is a higher hot spot at the west area is probably due to a larger population living there, whereas for a higher cold spot is probably because there is a lower population living there. However, one thing got me curious to find out more is that Jakarta is the capital of Indonesia which I believed is much more urbanized as compared to other region like Medan or Surabaya etc, yet, the the cold spot area is quite high as compared to the hot spot. Does it mean that the resident is very much not convinced in getting vaccinated? or does the government did not educate or promote enough on the benefits of getting vaccinated? or is there a shortage of dose around the area? Does it mean that other regions of Indonesia has a worse results? But, we also notice that at earlier stage, cold spot is more dense as compared to the later stage. This shows that as time goes by, the results has improve probably due to the wide spread of news that the vaccine has proved to be effective giving health benefits to the people."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#k-nearest-neighbours",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#k-nearest-neighbours",
    "title": "Take Home Ex 2",
    "section": "K nearest neighbours",
    "text": "K nearest neighbours\nNext we need to determine the cut-off distance. we need to determine the upper limit for distance band.\n\nfix_d <- dnearneigh(coords, 0, all.linked, longlat = TRUE)\nfix_d\n\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 3720 \nPercentage nonzero weights: 5.460871 \nAverage number of links: 14.25287 \n\n\nNext, we need to assign weights to each neighboring polygon. The function adds a weights list with values given by the coding scheme style chosen. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. nb2listw() is used to convert the nb object into spatial weights object.\n\nfix_lw <- nb2listw(fix_d, style = 'W')\nsummary(fix_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 261 \nNumber of nonzero links: 3720 \nPercentage nonzero weights: 5.460871 \nAverage number of links: 14.25287 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 4  4 12 15 14 13 17 13 15 13  7  5  4  7  9  6  8  7  7  3  7  8  9 10  7  5 \n27 28 29 30 31 32 33 \n 7  9  6  1  6  2  1 \n4 least connected regions:\n19 32 149 178 with 1 link\n1 most connected region:\n120 with 33 links\n\nWeights style: W \nWeights constants summary:\n    n    nn  S0       S1       S2\nW 261 68121 261 61.69885 1058.694\n\n\nThe summary report above shows that there are 261 area units in Jakarta. The most connected area unit has 33 neighbours which is in the West area of Jakarta.There are 4 area units with only one neighbours.\nIn the below code chuck, we can plot the area to show the neighbours based on the largest number of contiguities.\n\n#neighbour distance\ncards <- card(fix_d)\nmaxconts <- which(cards == max(cards))\nif(length(maxconts) > 1) maxconts <- maxconts[1]\nfg <- rep(\"grey\", length(cards))\nfg[maxconts] <- \"red\"\nfg[fix_d[[maxconts]]] <- \"green\"\nplot(st_geometry(jakarta), col=fg)\ntitle(main=\"Sub District with largest number of contiguities\")\n\n\n\n\nThe code below list all the neighbouring polygons of the ID we call. So for polygon ID : 2,39,152, 158 and 166 are all its neighbours. We can find out the name of the ID as well, lets check for the most connected region which is ID 120.\n\nfix_d[[120]]\n\n [1]   1   2   6   8  39  42  43  44  53 113 114 119 123 124 125 138 151 152 158\n[20] 159 160 161 163 164 165 166 167 168 169 170 172 180 181\n\n\n\njakarta_vaccine$KELURAHAN[120]\n\n[1] \"DURI PULO\"\n\n\nWe can also check all the list of 261 area neighbours\n\nstr(fix_d)\n\nList of 261\n $ : int [1:29] 2 5 6 7 8 39 44 119 120 121 ...\n $ : int [1:27] 1 6 7 8 35 39 44 119 120 121 ...\n $ : int [1:21] 4 5 9 10 11 12 17 109 110 115 ...\n $ : int [1:19] 3 9 10 11 12 17 109 110 115 116 ...\n $ : int [1:28] 1 3 6 7 8 9 10 14 17 109 ...\n $ : int [1:29] 1 2 5 7 8 9 10 34 35 39 ...\n $ : int [1:24] 1 2 5 6 34 35 36 39 44 117 ...\n $ : int [1:31] 1 2 5 6 39 44 53 119 120 121 ...\n $ : int [1:27] 3 4 5 6 10 13 14 17 109 110 ...\n $ : int [1:28] 3 4 5 6 9 11 12 14 17 109 ...\n $ : int [1:18] 3 4 10 12 17 110 115 116 118 127 ...\n $ : int [1:22] 3 4 10 11 17 89 90 91 111 126 ...\n $ : int [1:25] 9 14 16 59 60 62 63 64 65 90 ...\n $ : int [1:28] 5 9 10 13 16 17 60 63 64 65 ...\n $ : int [1:17] 16 52 53 60 113 124 125 132 134 135 ...\n $ : int [1:23] 13 14 15 53 60 61 62 65 123 124 ...\n $ : int [1:27] 3 4 5 9 10 11 12 14 109 110 ...\n $ : int [1:9] 21 24 26 27 28 31 33 112 150\n $ : int 177\n $ : int [1:3] 142 143 144\n $ : int [1:9] 18 24 26 27 28 31 33 112 150\n $ : int [1:6] 23 24 25 145 146 147\n $ : int [1:10] 22 24 25 27 28 112 145 146 147 154\n $ : int [1:9] 18 21 22 23 25 26 28 112 145\n $ : int [1:7] 22 23 24 28 112 145 147\n $ : int [1:7] 18 21 24 28 31 112 145\n $ : int [1:8] 18 21 23 28 33 112 148 154\n $ : int [1:10] 18 21 23 24 25 26 27 33 112 154\n $ : int [1:4] 31 33 149 150\n $ : int [1:11] 42 43 48 49 114 144 157 160 164 167 ...\n $ : int [1:6] 18 21 26 29 33 150\n $ : int 241\n $ : int [1:8] 18 21 27 28 29 31 148 150\n $ : int [1:14] 6 7 35 36 109 110 115 116 117 121 ...\n $ : int [1:14] 2 6 7 34 36 39 117 121 122 147 ...\n $ : int [1:7] 7 34 35 39 122 159 162\n $ : int [1:5] 153 154 220 226 239\n $ : int [1:3] 41 51 177\n $ : int [1:27] 1 2 6 7 8 35 36 44 119 120 ...\n $ : int [1:4] 41 143 156 157\n $ : int [1:3] 38 40 156\n $ : int [1:19] 30 43 48 49 50 53 113 114 120 124 ...\n $ : int [1:18] 30 42 44 48 49 113 114 120 144 160 ...\n $ : int [1:29] 1 2 6 7 8 39 43 114 119 120 ...\n $ : int [1:9] 46 47 52 57 75 134 174 182 200\n $ : int [1:12] 45 47 52 57 73 74 75 174 200 205 ...\n $ : int [1:7] 45 46 52 57 75 174 200\n $ : int [1:10] 30 42 43 49 50 113 160 161 174 182\n $ : int [1:8] 30 42 43 48 50 55 156 157\n $ : int [1:7] 42 48 49 55 57 174 186\n $ : int [1:3] 38 175 177\n $ : int [1:13] 15 45 46 47 53 113 134 135 174 179 ...\n $ : int [1:19] 8 15 16 42 52 113 120 123 124 125 ...\n $ : int [1:20] 58 59 89 90 91 94 95 96 111 173 ...\n $ : int [1:7] 49 50 56 155 156 157 186\n $ : int [1:5] 55 57 183 185 186\n $ : int [1:9] 45 46 47 50 56 174 183 185 219\n $ : int [1:19] 54 59 84 89 95 96 184 187 188 189 ...\n $ : int [1:25] 13 54 58 60 62 63 64 65 66 89 ...\n $ : int [1:23] 13 14 15 16 59 61 62 63 64 65 ...\n $ : int [1:18] 16 60 62 63 65 66 67 76 134 135 ...\n $ : int [1:19] 13 16 59 60 61 63 64 65 66 67 ...\n $ : int [1:22] 13 14 59 60 61 62 64 65 66 90 ...\n $ : int [1:23] 13 14 59 60 62 63 65 66 90 126 ...\n $ : int [1:24] 13 14 16 59 60 61 62 63 64 66 ...\n $ : int [1:21] 59 60 61 62 63 64 65 67 76 184 ...\n $ : int [1:17] 61 62 66 68 76 83 184 189 194 195 ...\n $ : int [1:11] 67 71 79 80 83 194 195 204 209 210 ...\n $ : int [1:5] 72 193 197 198 202\n $ : int [1:11] 71 83 84 97 99 100 193 197 230 232 ...\n $ : int [1:10] 68 70 83 84 99 193 195 197 211 212\n $ : int [1:8] 69 85 86 193 197 198 217 235\n $ : int [1:12] 46 74 75 80 81 82 201 204 205 206 ...\n $ : int [1:11] 46 73 75 82 200 201 205 206 218 219 ...\n $ : int [1:12] 45 46 47 73 74 134 200 201 205 206 ...\n $ : int [1:18] 60 61 62 66 67 134 135 136 192 194 ...\n $ : int [1:3] 198 202 203\n $ : int [1:8] 79 80 81 199 201 202 206 210\n $ : int [1:8] 68 78 80 81 198 199 202 210\n $ : int [1:14] 68 73 78 79 81 194 201 204 205 206 ...\n $ : int [1:11] 73 78 79 80 199 201 204 205 206 209 ...\n $ : int [1:5] 73 74 218 219 221\n $ : int [1:13] 67 68 70 71 84 99 193 194 195 211 ...\n $ : int [1:17] 58 70 71 83 99 100 106 184 187 211 ...\n $ : int [1:7] 72 86 101 215 217 235 236\n $ : int [1:4] 72 85 215 216\n $ : int [1:2] 215 216\n $ : int [1:3] 199 201 218\n $ : int [1:24] 12 54 58 59 90 91 94 95 96 111 ...\n $ : int [1:23] 12 13 14 54 59 63 64 65 89 91 ...\n $ : int [1:21] 12 54 59 89 90 96 111 126 127 130 ...\n $ : int [1:8] 93 103 111 173 220 225 238 239\n $ : int [1:8] 92 111 173 220 225 226 238 239\n $ : int [1:11] 54 89 95 96 103 111 173 188 228 229 ...\n $ : int [1:15] 54 58 89 94 96 111 173 187 188 190 ...\n $ : int [1:17] 54 58 89 91 94 95 111 173 188 190 ...\n $ : int [1:10] 70 98 99 105 217 230 231 232 234 254\n $ : int [1:10] 97 105 230 231 232 234 253 254 260 261\n $ : int [1:13] 70 71 83 84 97 100 193 197 217 230 ...\n  [list output truncated]\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:261] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = all.linked, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 2.92\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi-statistics",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#computing-local-gi-statistics",
    "title": "Take Home Ex 2",
    "section": "Computing Local Gi statistics",
    "text": "Computing Local Gi statistics\nUnlike global measures that summarize the overall spatial autocorrelation of the study area in one single value, local measures of spatial association identify local clusters (observations nearby have similar attribute values) or spatial outliers (observations nearby have different attribute values).\nIn the below section we will then check if we can find the sub district in which the relatively higher number of vaccination rate is significantly higher.\nwe will be using localG() functions to compute the Local Gi statistic.\nLocal Gi stats allows the detection of a local concentration of high and low values in neighboring objects and studies the statistical significance of that dependence.\nThe analysis will be conducted with the previous variable (jv_q) and the neighborhood matrix – Queen, row standardized (according to contiguity)\n\nset.seed(999)\nlocalgi_jul21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_aug21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_sep21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_oct21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_nov21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_dec21 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_jan22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_feb22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_mar22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_apr22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_may22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\nlocalgi_jun22 <- local_gstar_perm(jakarta_vaccine$TotalV_jul21, fix_d, fix_lw, nsim=39)\n\n\njv.localGi_jul21 <- cbind(jakarta_vaccine,localgi_jul21)\njv.localGi_aug21 <- cbind(jakarta_vaccine,localgi_aug21)\njv.localGi_sep21 <- cbind(jakarta_vaccine,localgi_sep21)\njv.localGi_oct21 <- cbind(jakarta_vaccine,localgi_oct21)\njv.localGi_nov21 <- cbind(jakarta_vaccine,localgi_nov21)\njv.localGi_dec21 <- cbind(jakarta_vaccine,localgi_dec21)\njv.localGi_jan22 <- cbind(jakarta_vaccine,localgi_jan22)\njv.localGi_feb22 <- cbind(jakarta_vaccine,localgi_feb22)\njv.localGi_mar22 <- cbind(jakarta_vaccine,localgi_mar22)\njv.localGi_apr22 <- cbind(jakarta_vaccine,localgi_apr22)\njv.localGi_may22 <- cbind(jakarta_vaccine,localgi_may22)\njv.localGi_jun22 <- cbind(jakarta_vaccine,localgi_jun22)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "href": "Take-home_Ex/Take-home_Ex02/Take-home_Ex02.html#performing-emerging-hotspot-analysis",
    "title": "Take Home Ex 2",
    "section": "Performing Emerging Hotspot Analysis",
    "text": "Performing Emerging Hotspot Analysis\nLastly, we will be perfoming EHSA analysis by using emerging_hotspot_analysis().\n\nset.seed(999)\nehsa <- emerging_hotspot_analysis(\n  x = vacc_rate_st, \n  .var = \"gi_star\", \n  k = 1, \n  nsim = 99\n)\n\ncolnames(ehsa)[1] <- \"DESA\"\n\n\ng1 <- ggplot(data = ehsa,\n       aes(x = classification)) +\n  geom_bar()\nggplotly(g1)\n\n\n\n\n\nFigure above shows that no pattern detected class has the high numbers of count followed by persistent cold spot."
  }
]